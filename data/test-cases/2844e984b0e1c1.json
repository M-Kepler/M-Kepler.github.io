{"uid":"2844e984b0e1c1","name":"test_chat_with_file[KimiHelper]","fullName":"lib.llm.test_llm.TestLLM#test_chat_with_file","historyId":"41c3ead4602e7df250fb30912a42ca73","time":{"start":1722005173419,"stop":1722006980655,"duration":1807236},"description":"\n        测试阅读文章\n        ","descriptionHtml":"<pre><code>    测试阅读文章\n</code></pre>\n","status":"broken","statusMessage":"openai.APITimeoutError: Request timed out.","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:233: in handle_request\n    resp = self._pool.handle_request(req)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py:216: in handle_request\n    raise exc from None\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py:196: in handle_request\n    response = connection.handle_request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/connection.py:101: in handle_request\n    return self._connection.handle_request(request)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:143: in handle_request\n    raise exc\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:95: in handle_request\n    self._send_request_body(**kwargs)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:166: in _send_request_body\n    self._send_event(event, timeout=timeout)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:175: in _send_event\n    self._network_stream.write(bytes_to_send, timeout=timeout)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_backends/sync.py:137: in write\n    buffer = buffer[n:]\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'socket.timeout'>: <class 'httpcore.WriteTimeout'>, <class 'OSError'>: <class 'httpcore.WriteError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.WriteTimeout: The write operation timed out\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_exceptions.py:14: WriteTimeout\n\nThe above exception was the direct cause of the following exception:\n\nself = <openai.OpenAI object at 0x7f0b23fc3a30>\n\n    def _request(\n        self,\n        *,\n        cast_to: Type[ResponseT],\n        options: FinalRequestOptions,\n        remaining_retries: int | None,\n        stream: bool,\n        stream_cls: type[_StreamT] | None,\n    ) -> ResponseT | _StreamT:\n        # create a copy of the options we were given so that if the\n        # options are mutated later & we then retry, the retries are\n        # given the original options\n        input_options = model_copy(options)\n    \n        cast_to = self._maybe_override_cast_to(cast_to, options)\n        options = self._prepare_options(options)\n    \n        retries = self._remaining_retries(remaining_retries, options)\n        request = self._build_request(options)\n        self._prepare_request(request)\n    \n        kwargs: HttpxSendArgs = {}\n        if self.custom_auth is not None:\n            kwargs[\"auth\"] = self.custom_auth\n    \n        log.debug(\"Sending HTTP Request: %s %s\", request.method, request.url)\n    \n        try:\n>           response = self._client.send(\n                request,\n                stream=stream or self._should_stream_response_body(request=request),\n                **kwargs,\n            )\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:914: in send\n    response = self._send_handling_auth(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:942: in _send_handling_auth\n    response = self._send_handling_redirects(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:979: in _send_handling_redirects\n    response = self._send_single_request(request)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:1015: in _send_single_request\n    response = transport.handle_request(request)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:233: in handle_request\n    resp = self._pool.handle_request(req)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.WriteTimeout: The write operation timed out\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:86: WriteTimeout\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_llm.TestLLM object at 0x7f0b2936d2e0>\nllm_provider = <class 'mypy.lib.llm.kimi.helper.KimiHelper'>\n\n    def test_chat_with_file(self, llm_provider):\n        \"\"\"\n        测试阅读文章\n        \"\"\"\n        print(f'----- {llm_provider.__name__} -----')\n        llm_api: OpenAIBaseHelper = llm_provider()\n>       result = llm_api.chat_with_file(Assets.ppt)\n\nmypy/tests/lib/llm/test_llm.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/llm/core/helper.py:119: in chat_with_file\n    file_object = self._client.files.create(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/resources/files.py:118: in create\n    return self._post(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:1266: in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:942: in request\n    return self._request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:987: in _request\n    return self._retry_request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:1079: in _retry_request\n    return self._request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:987: in _request\n    return self._retry_request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:1079: in _retry_request\n    return self._request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openai.OpenAI object at 0x7f0b23fc3a30>\n\n    def _request(\n        self,\n        *,\n        cast_to: Type[ResponseT],\n        options: FinalRequestOptions,\n        remaining_retries: int | None,\n        stream: bool,\n        stream_cls: type[_StreamT] | None,\n    ) -> ResponseT | _StreamT:\n        # create a copy of the options we were given so that if the\n        # options are mutated later & we then retry, the retries are\n        # given the original options\n        input_options = model_copy(options)\n    \n        cast_to = self._maybe_override_cast_to(cast_to, options)\n        options = self._prepare_options(options)\n    \n        retries = self._remaining_retries(remaining_retries, options)\n        request = self._build_request(options)\n        self._prepare_request(request)\n    \n        kwargs: HttpxSendArgs = {}\n        if self.custom_auth is not None:\n            kwargs[\"auth\"] = self.custom_auth\n    \n        log.debug(\"Sending HTTP Request: %s %s\", request.method, request.url)\n    \n        try:\n            response = self._client.send(\n                request,\n                stream=stream or self._should_stream_response_body(request=request),\n                **kwargs,\n            )\n        except httpx.TimeoutException as err:\n            log.debug(\"Encountered httpx.TimeoutException\", exc_info=True)\n    \n            if retries > 0:\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                    response_headers=None,\n                )\n    \n            log.debug(\"Raising timeout error\")\n>           raise APITimeoutError(request=request) from err\nE           openai.APITimeoutError: Request timed out.\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:997: APITimeoutError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1722000946192,"stop":1722000946192,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1722004918147,"stop":1722004918149,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        测试阅读文章\n        ","status":"broken","statusMessage":"openai.APITimeoutError: Request timed out.","statusTrace":"@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:233: in handle_request\n    resp = self._pool.handle_request(req)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py:216: in handle_request\n    raise exc from None\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py:196: in handle_request\n    response = connection.handle_request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/connection.py:101: in handle_request\n    return self._connection.handle_request(request)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:143: in handle_request\n    raise exc\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:95: in handle_request\n    self._send_request_body(**kwargs)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:166: in _send_request_body\n    self._send_event(event, timeout=timeout)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_sync/http11.py:175: in _send_event\n    self._network_stream.write(bytes_to_send, timeout=timeout)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_backends/sync.py:137: in write\n    buffer = buffer[n:]\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmap = {<class 'socket.timeout'>: <class 'httpcore.WriteTimeout'>, <class 'OSError'>: <class 'httpcore.WriteError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.WriteTimeout: The write operation timed out\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpcore/_exceptions.py:14: WriteTimeout\n\nThe above exception was the direct cause of the following exception:\n\nself = <openai.OpenAI object at 0x7f0b23fc3a30>\n\n    def _request(\n        self,\n        *,\n        cast_to: Type[ResponseT],\n        options: FinalRequestOptions,\n        remaining_retries: int | None,\n        stream: bool,\n        stream_cls: type[_StreamT] | None,\n    ) -> ResponseT | _StreamT:\n        # create a copy of the options we were given so that if the\n        # options are mutated later & we then retry, the retries are\n        # given the original options\n        input_options = model_copy(options)\n    \n        cast_to = self._maybe_override_cast_to(cast_to, options)\n        options = self._prepare_options(options)\n    \n        retries = self._remaining_retries(remaining_retries, options)\n        request = self._build_request(options)\n        self._prepare_request(request)\n    \n        kwargs: HttpxSendArgs = {}\n        if self.custom_auth is not None:\n            kwargs[\"auth\"] = self.custom_auth\n    \n        log.debug(\"Sending HTTP Request: %s %s\", request.method, request.url)\n    \n        try:\n>           response = self._client.send(\n                request,\n                stream=stream or self._should_stream_response_body(request=request),\n                **kwargs,\n            )\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:914: in send\n    response = self._send_handling_auth(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:942: in _send_handling_auth\n    response = self._send_handling_redirects(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:979: in _send_handling_redirects\n    response = self._send_single_request(request)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_client.py:1015: in _send_single_request\n    response = transport.handle_request(request)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:233: in handle_request\n    resp = self._pool.handle_request(req)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/contextlib.py:137: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.WriteTimeout: The write operation timed out\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/httpx/_transports/default.py:86: WriteTimeout\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_llm.TestLLM object at 0x7f0b2936d2e0>\nllm_provider = <class 'mypy.lib.llm.kimi.helper.KimiHelper'>\n\n    def test_chat_with_file(self, llm_provider):\n        \"\"\"\n        测试阅读文章\n        \"\"\"\n        print(f'----- {llm_provider.__name__} -----')\n        llm_api: OpenAIBaseHelper = llm_provider()\n>       result = llm_api.chat_with_file(Assets.ppt)\n\nmypy/tests/lib/llm/test_llm.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/llm/core/helper.py:119: in chat_with_file\n    file_object = self._client.files.create(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/resources/files.py:118: in create\n    return self._post(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:1266: in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:942: in request\n    return self._request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:987: in _request\n    return self._retry_request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:1079: in _retry_request\n    return self._request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:987: in _request\n    return self._retry_request(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:1079: in _retry_request\n    return self._request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openai.OpenAI object at 0x7f0b23fc3a30>\n\n    def _request(\n        self,\n        *,\n        cast_to: Type[ResponseT],\n        options: FinalRequestOptions,\n        remaining_retries: int | None,\n        stream: bool,\n        stream_cls: type[_StreamT] | None,\n    ) -> ResponseT | _StreamT:\n        # create a copy of the options we were given so that if the\n        # options are mutated later & we then retry, the retries are\n        # given the original options\n        input_options = model_copy(options)\n    \n        cast_to = self._maybe_override_cast_to(cast_to, options)\n        options = self._prepare_options(options)\n    \n        retries = self._remaining_retries(remaining_retries, options)\n        request = self._build_request(options)\n        self._prepare_request(request)\n    \n        kwargs: HttpxSendArgs = {}\n        if self.custom_auth is not None:\n            kwargs[\"auth\"] = self.custom_auth\n    \n        log.debug(\"Sending HTTP Request: %s %s\", request.method, request.url)\n    \n        try:\n            response = self._client.send(\n                request,\n                stream=stream or self._should_stream_response_body(request=request),\n                **kwargs,\n            )\n        except httpx.TimeoutException as err:\n            log.debug(\"Encountered httpx.TimeoutException\", exc_info=True)\n    \n            if retries > 0:\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                    response_headers=None,\n                )\n    \n            log.debug(\"Raising timeout error\")\n>           raise APITimeoutError(request=request) from err\nE           openai.APITimeoutError: Request timed out.\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/openai/_base_client.py:997: APITimeoutError","steps":[],"attachments":[{"uid":"d4de1f27a705f48a","name":"log","source":"d4de1f27a705f48a.txt","type":"text/plain","size":74}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1722006981168,"stop":1722006981169,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"lib.llm"},{"name":"suite","value":"test_llm"},{"name":"subSuite","value":"TestLLM"},{"name":"host","value":"fv-az1393-77"},{"name":"thread","value":"8986-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.llm.test_llm"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"llm_provider","value":"<class 'mypy.lib.llm.kimi.helper.KimiHelper'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"2844e984b0e1c1.json","parameterValues":["<class 'mypy.lib.llm.kimi.helper.KimiHelper'>"]}