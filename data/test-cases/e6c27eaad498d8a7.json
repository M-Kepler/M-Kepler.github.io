{"uid":"e6c27eaad498d8a7","name":"test_ppt2video[by_powerpoint]","fullName":"lib.ppt.test_ppt_handler#test_ppt2video","historyId":"3b289a6f34565c57982dbce30c248c4d","time":{"start":1721836313412,"stop":1721836318715,"duration":5303},"description":"\n    PPT 转视频\n    ","descriptionHtml":"<pre><code>PPT 转视频\n</code></pre>\n","status":"broken","statusMessage":"TypeError: expected str, bytes or os.PathLike object, not NoneType","statusTrace":"test_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/ppt/_out/test_ppt_handler'\nby_powerpoint = True\n\n    @pytest.mark.parametrize('by_powerpoint',\n                             [True, False],\n                             ids=['by_powerpoint', 'by_libreoffice'])\n    def test_ppt2video(test_output_dir, by_powerpoint):\n        \"\"\"\n        PPT 转视频\n        \"\"\"\n        # 把测试文件拷贝到当前函数名称的目录下\n        output_dir = os.path.join(test_output_dir, curr_func_name())\n        with FileUtil.copy_file_context(Assets.ppt, output_dir) as test_file:\n            # ppt 转成视频的文件名\n            output_video_filepath = FileUtil.rename_ext(\n                test_file, '.mp4')\n>           ppt2video(ppt_path=test_file,\n                      output_video_path=output_video_filepath,\n                      by_powerpoint=by_powerpoint)\n\nmypy/tests/lib/ppt/test_ppt_handler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/ppt/ppt_handler.py:58: in ppt2video\n    PDFHandler(output_pdf_path).pdf2video(output_video_path)\nmypy/lib/pdf/pdf_handler.py:68: in pdf2video\n    self.pdf2images(temp_dir)\nmypy/lib/pdf/pdf_handler.py:43: in pdf2images\n    _, file_ext = os.path.splitext(self._input_pdf_path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\np = None\n\n    def splitext(p):\n>       p = os.fspath(p)\nE       TypeError: expected str, bytes or os.PathLike object, not NoneType\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/posixpath.py:118: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1721831550977,"stop":1721831550977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1721836313409,"stop":1721836313411,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_output_dir","time":{"start":1721836313411,"stop":1721836313411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    PPT 转视频\n    ","status":"broken","statusMessage":"TypeError: expected str, bytes or os.PathLike object, not NoneType","statusTrace":"test_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/ppt/_out/test_ppt_handler'\nby_powerpoint = True\n\n    @pytest.mark.parametrize('by_powerpoint',\n                             [True, False],\n                             ids=['by_powerpoint', 'by_libreoffice'])\n    def test_ppt2video(test_output_dir, by_powerpoint):\n        \"\"\"\n        PPT 转视频\n        \"\"\"\n        # 把测试文件拷贝到当前函数名称的目录下\n        output_dir = os.path.join(test_output_dir, curr_func_name())\n        with FileUtil.copy_file_context(Assets.ppt, output_dir) as test_file:\n            # ppt 转成视频的文件名\n            output_video_filepath = FileUtil.rename_ext(\n                test_file, '.mp4')\n>           ppt2video(ppt_path=test_file,\n                      output_video_path=output_video_filepath,\n                      by_powerpoint=by_powerpoint)\n\nmypy/tests/lib/ppt/test_ppt_handler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/ppt/ppt_handler.py:58: in ppt2video\n    PDFHandler(output_pdf_path).pdf2video(output_video_path)\nmypy/lib/pdf/pdf_handler.py:68: in pdf2video\n    self.pdf2images(temp_dir)\nmypy/lib/pdf/pdf_handler.py:43: in pdf2images\n    _, file_ext = os.path.splitext(self._input_pdf_path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\np = None\n\n    def splitext(p):\n>       p = os.fspath(p)\nE       TypeError: expected str, bytes or os.PathLike object, not NoneType\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/posixpath.py:118: TypeError","steps":[],"attachments":[{"uid":"30a4819e21a07950","name":"log","source":"30a4819e21a07950.txt","type":"text/plain","size":865}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"test_output_dir::0","time":{"start":1721836329353,"stop":1721836329354,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir::finish_callback","time":{"start":1721836329354,"stop":1721836329355,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ppt"},{"name":"parentSuite","value":"lib.ppt"},{"name":"suite","value":"test_ppt_handler"},{"name":"host","value":"fv-az1206-225"},{"name":"thread","value":"8866-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.ppt.test_ppt_handler"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"by_powerpoint","value":"True"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ppt"]},"source":"e6c27eaad498d8a7.json","parameterValues":["True"]}