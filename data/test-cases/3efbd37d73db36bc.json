{"uid":"3efbd37d73db36bc","name":"test_ppt2video","fullName":"lib.ppt.test_ppt2video#test_ppt2video","historyId":"361a26cf0d0ddd76c6e8ef5b2b55ce46","time":{"start":1714650527758,"stop":1714650546832,"duration":19074},"status":"broken","statusMessage":"ffmpy.FFRuntimeError: `ffmpeg -f concat -safe 0 -i /tmp/tmpneq88bud -c copy -y -loglevel quiet /home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video/ppt_ppt2video.pptx` exited with status 1\n\nSTDOUT:\n\n\nSTDERR:","statusTrace":"test_output_dir = '/home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video'\n\n    def test_ppt2video(test_output_dir):\n        # 把测试文件拷贝进来\n        test_ppt_file = _cp_test_file(test_output_dir)\n    \n        # ppt 转成视频的文件名\n        output_video_filepath = os.path.join(\n            test_output_dir, FileUtil.append_postfix(\n                os.path.basename(test_ppt_file), '_ppt2video'))\n    \n>       ppt2video(ppt_path=test_ppt_file,\n                  output_path=output_video_filepath)\n\nmypy/tests/lib/ppt/test_ppt2video.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/ppt/ppt_handler.py:45: in ppt2video\n    PDFHandler(output_pdf_path).pdf2video(output_path)\nmypy/lib/pdf/pdf_handler.py:85: in pdf2video\n    FFmpegHelper.ffmpeg_concat(video_list, output_video_path)\nmypy/lib/video/ffmpeg_helper.py:475: in ffmpeg_concat\n    cls._run_class_method(ff, log_output)\nmypy/lib/video/ffmpeg_helper.py:160: in _run_class_method\n    raise ex\nmypy/lib/video/ffmpeg_helper.py:157: in _run_class_method\n    ff.run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <'FFmpeg' 'ffmpeg -f concat -safe 0 -i /tmp/tmpneq88bud -c copy -y -loglevel quiet /home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video/ppt_ppt2video.pptx'>\ninput_data = None, stdout = None, stderr = None, env = None, kwargs = {}\nout = (None, None)\n\n    def run(self, input_data=None, stdout=None, stderr=None, env=None, **kwargs):\n        \"\"\"Execute FFmpeg command line.\n    \n        ``input_data`` can contain input for FFmpeg in case ``pipe`` protocol is used for input.\n        ``stdout`` and ``stderr`` specify where to redirect the ``stdout`` and ``stderr`` of the\n        process. By default no redirection is done, which means all output goes to running shell\n        (this mode should normally only be used for debugging purposes). If FFmpeg ``pipe`` protocol\n        is used for output, ``stdout`` must be redirected to a pipe by passing `subprocess.PIPE` as\n        ``stdout`` argument. You can pass custom environment to ffmpeg process with ``env``.\n    \n        Returns a 2-tuple containing ``stdout`` and ``stderr`` of the process. If there was no\n        redirection or if the output was redirected to e.g. `os.devnull`, the value returned will\n        be a tuple of two `None` values, otherwise it will contain the actual ``stdout`` and\n        ``stderr`` data returned by ffmpeg process.\n    \n        More info about ``pipe`` protocol `here <https://ffmpeg.org/ffmpeg-protocols.html#pipe>`_.\n    \n        :param str input_data: input data for FFmpeg to deal with (audio, video etc.) as bytes (e.g.\n            the result of reading a file in binary mode)\n        :param stdout: redirect FFmpeg ``stdout`` there (default is `None` which means no\n            redirection)\n        :param stderr: redirect FFmpeg ``stderr`` there (default is `None` which means no\n            redirection)\n        :param env: custom environment for ffmpeg process\n        :param kwargs: any other keyword arguments to be forwarded to `subprocess.Popen\n            <https://docs.python.org/3/library/subprocess.html#subprocess.Popen>`_\n        :return: a 2-tuple containing ``stdout`` and ``stderr`` of the process\n        :rtype: tuple\n        :raise: `FFRuntimeError` in case FFmpeg command exits with a non-zero code;\n            `FFExecutableNotFoundError` in case the executable path passed was not valid\n        \"\"\"\n        try:\n            self.process = subprocess.Popen(\n                self._cmd,\n                stdin=subprocess.PIPE,\n                stdout=stdout,\n                stderr=stderr,\n                env=env,\n                **kwargs\n            )\n        except OSError as e:\n            if e.errno == errno.ENOENT:\n                raise FFExecutableNotFoundError(\n                    \"Executable '{0}' not found\".format(self.executable)\n                )\n            else:\n                raise\n    \n        out = self.process.communicate(input=input_data)\n        if self.process.returncode != 0:\n>           raise FFRuntimeError(self.cmd, self.process.returncode, out[0], out[1])\nE           ffmpy.FFRuntimeError: `ffmpeg -f concat -safe 0 -i /tmp/tmpneq88bud -c copy -y -loglevel quiet /home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video/ppt_ppt2video.pptx` exited with status 1\nE           \nE           STDOUT:\nE           \nE           \nE           STDERR:\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/ffmpy.py:113: FFRuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1714649392879,"stop":1714649392880,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"test_output_dir","time":{"start":1714650527757,"stop":1714650527757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"ffmpy.FFRuntimeError: `ffmpeg -f concat -safe 0 -i /tmp/tmpneq88bud -c copy -y -loglevel quiet /home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video/ppt_ppt2video.pptx` exited with status 1\n\nSTDOUT:\n\n\nSTDERR:","statusTrace":"test_output_dir = '/home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video'\n\n    def test_ppt2video(test_output_dir):\n        # 把测试文件拷贝进来\n        test_ppt_file = _cp_test_file(test_output_dir)\n    \n        # ppt 转成视频的文件名\n        output_video_filepath = os.path.join(\n            test_output_dir, FileUtil.append_postfix(\n                os.path.basename(test_ppt_file), '_ppt2video'))\n    \n>       ppt2video(ppt_path=test_ppt_file,\n                  output_path=output_video_filepath)\n\nmypy/tests/lib/ppt/test_ppt2video.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/ppt/ppt_handler.py:45: in ppt2video\n    PDFHandler(output_pdf_path).pdf2video(output_path)\nmypy/lib/pdf/pdf_handler.py:85: in pdf2video\n    FFmpegHelper.ffmpeg_concat(video_list, output_video_path)\nmypy/lib/video/ffmpeg_helper.py:475: in ffmpeg_concat\n    cls._run_class_method(ff, log_output)\nmypy/lib/video/ffmpeg_helper.py:160: in _run_class_method\n    raise ex\nmypy/lib/video/ffmpeg_helper.py:157: in _run_class_method\n    ff.run()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <'FFmpeg' 'ffmpeg -f concat -safe 0 -i /tmp/tmpneq88bud -c copy -y -loglevel quiet /home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video/ppt_ppt2video.pptx'>\ninput_data = None, stdout = None, stderr = None, env = None, kwargs = {}\nout = (None, None)\n\n    def run(self, input_data=None, stdout=None, stderr=None, env=None, **kwargs):\n        \"\"\"Execute FFmpeg command line.\n    \n        ``input_data`` can contain input for FFmpeg in case ``pipe`` protocol is used for input.\n        ``stdout`` and ``stderr`` specify where to redirect the ``stdout`` and ``stderr`` of the\n        process. By default no redirection is done, which means all output goes to running shell\n        (this mode should normally only be used for debugging purposes). If FFmpeg ``pipe`` protocol\n        is used for output, ``stdout`` must be redirected to a pipe by passing `subprocess.PIPE` as\n        ``stdout`` argument. You can pass custom environment to ffmpeg process with ``env``.\n    \n        Returns a 2-tuple containing ``stdout`` and ``stderr`` of the process. If there was no\n        redirection or if the output was redirected to e.g. `os.devnull`, the value returned will\n        be a tuple of two `None` values, otherwise it will contain the actual ``stdout`` and\n        ``stderr`` data returned by ffmpeg process.\n    \n        More info about ``pipe`` protocol `here <https://ffmpeg.org/ffmpeg-protocols.html#pipe>`_.\n    \n        :param str input_data: input data for FFmpeg to deal with (audio, video etc.) as bytes (e.g.\n            the result of reading a file in binary mode)\n        :param stdout: redirect FFmpeg ``stdout`` there (default is `None` which means no\n            redirection)\n        :param stderr: redirect FFmpeg ``stderr`` there (default is `None` which means no\n            redirection)\n        :param env: custom environment for ffmpeg process\n        :param kwargs: any other keyword arguments to be forwarded to `subprocess.Popen\n            <https://docs.python.org/3/library/subprocess.html#subprocess.Popen>`_\n        :return: a 2-tuple containing ``stdout`` and ``stderr`` of the process\n        :rtype: tuple\n        :raise: `FFRuntimeError` in case FFmpeg command exits with a non-zero code;\n            `FFExecutableNotFoundError` in case the executable path passed was not valid\n        \"\"\"\n        try:\n            self.process = subprocess.Popen(\n                self._cmd,\n                stdin=subprocess.PIPE,\n                stdout=stdout,\n                stderr=stderr,\n                env=env,\n                **kwargs\n            )\n        except OSError as e:\n            if e.errno == errno.ENOENT:\n                raise FFExecutableNotFoundError(\n                    \"Executable '{0}' not found\".format(self.executable)\n                )\n            else:\n                raise\n    \n        out = self.process.communicate(input=input_data)\n        if self.process.returncode != 0:\n>           raise FFRuntimeError(self.cmd, self.process.returncode, out[0], out[1])\nE           ffmpy.FFRuntimeError: `ffmpeg -f concat -safe 0 -i /tmp/tmpneq88bud -c copy -y -loglevel quiet /home/runner/work/Python/Python/mypy/tests/lib/ppt/_out/test_ppt2video/ppt_ppt2video.pptx` exited with status 1\nE           \nE           STDOUT:\nE           \nE           \nE           STDERR:\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/ffmpy.py:113: FFRuntimeError","steps":[],"attachments":[{"uid":"222d4e0ebd04c432","name":"log","source":"222d4e0ebd04c432.txt","type":"text/plain","size":1661}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"test_output_dir::0","time":{"start":1714650546859,"stop":1714650546859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"ppt"},{"name":"parentSuite","value":"lib.ppt"},{"name":"suite","value":"test_ppt2video"},{"name":"host","value":"fv-az1758-722"},{"name":"thread","value":"6405-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.ppt.test_ppt2video"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ppt"]},"source":"3efbd37d73db36bc.json","parameterValues":[]}