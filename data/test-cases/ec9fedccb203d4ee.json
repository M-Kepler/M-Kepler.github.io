{"uid":"ec9fedccb203d4ee","name":"test_y2_video_handler","fullName":"lib.youtube.test_y2_handler#test_y2_video_handler","historyId":"2669b1c49b1922f099545f7769406d8e","time":{"start":1720631982541,"stop":1720631984553,"duration":2012},"description":"\n    测试 ytdlp 下载视频，并且合并音视频和字幕\n    ","descriptionHtml":"<pre><code>测试 ytdlp 下载视频，并且合并音视频和字幕\n</code></pre>\n","status":"broken","statusMessage":"pytube.exceptions.RegexMatchError: get_throttling_function_name: could not find match for multiple","statusTrace":"self = <pytube.__main__.YouTube object: videoId=fVcKBox97P0>\n\n    @property\n    def fmt_streams(self):\n        \"\"\"Returns a list of streams if they have been initialized.\n    \n        If the streams have not been initialized, finds all relevant\n        streams and initializes them.\n        \"\"\"\n        self.check_availability()\n        if self._fmt_streams:\n            return self._fmt_streams\n    \n        self._fmt_streams = []\n    \n        stream_manifest = extract.apply_descrambler(self.streaming_data)\n    \n        # If the cached js doesn't work, try fetching a new js file\n        # https://github.com/pytube/pytube/issues/1054\n        try:\n>           extract.apply_signature(stream_manifest, self.vid_info, self.js)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/__main__.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/extract.py:411: in apply_signature\n    cipher = Cipher(js=js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:43: in __init__\n    self.throttling_plan = get_throttling_plan(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:405: in get_throttling_plan\n    raw_code = get_throttling_function_code(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:311: in get_throttling_function_code\n    name = re.escape(get_throttling_function_name(js))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\njs = 'var _yt_player={};(function(g){var window=this;/*\\n\\n Copyright The Closure Library Authors.\\n SPDX-License-Identifie...h-this.suggestionData.length*(this.G+8),0);this.N.start(this.j,a,1E3);this.j=a;g.f1(this);c9a(this)};})(_yt_player);\\n'\n\n    def get_throttling_function_name(js: str) -> str:\n        \"\"\"Extract the name of the function that computes the throttling parameter.\n    \n        :param str js:\n            The contents of the base.js asset file.\n        :rtype: str\n        :returns:\n            The name of the function used to compute the throttling parameter.\n        \"\"\"\n        function_patterns = [\n            # https://github.com/ytdl-org/youtube-dl/issues/29326#issuecomment-865985377\n            # https://github.com/yt-dlp/yt-dlp/commit/48416bc4a8f1d5ff07d5977659cb8ece7640dcd8\n            # var Bpa = [iha];\n            # ...\n            # a.C && (b = a.get(\"n\")) && (b = Bpa[0](b), a.set(\"n\", b),\n            # Bpa.length || iha(\"\")) }};\n            # In the above case, `iha` is the relevant function name\n            r'a\\.[a-zA-Z]\\s*&&\\s*\\([a-z]\\s*=\\s*a\\.get\\(\"n\"\\)\\)\\s*&&\\s*'\n            r'\\([a-z]\\s*=\\s*([a-zA-Z0-9$]+)(\\[\\d+\\])?\\([a-z]\\)',\n        ]\n        logger.debug('Finding throttling function name')\n        for pattern in function_patterns:\n            regex = re.compile(pattern)\n            function_match = regex.search(js)\n            if function_match:\n                logger.debug(\"finished regex search, matched: %s\", pattern)\n                if len(function_match.groups()) == 1:\n                    return function_match.group(1)\n                idx = function_match.group(2)\n                if idx:\n                    idx = idx.strip(\"[]\")\n                    array = re.search(\n                        r'var {nfunc}\\s*=\\s*(\\[.+?\\]);'.format(\n                            nfunc=re.escape(function_match.group(1))),\n                        js\n                    )\n                    if array:\n                        array = array.group(1).strip(\"[]\").split(\",\")\n                        array = [x.strip() for x in array]\n                        return array[int(idx)]\n    \n>       raise RegexMatchError(\n            caller=\"get_throttling_function_name\", pattern=\"multiple\"\n        )\nE       pytube.exceptions.RegexMatchError: get_throttling_function_name: could not find match for multiple\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:296: RegexMatchError\n\nDuring handling of the above exception, another exception occurred:\n\ntest_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/youtube/_out/test_y2_handler'\n\n    def test_y2_video_handler(test_output_dir):\n        \"\"\"\n        测试 ytdlp 下载视频，并且合并音视频和字幕\n        \"\"\"\n        url = 'https://www.youtube.com/watch?v=fVcKBox97P0'\n        y2_api = Y2VideoHandler(video_url=url,\n                                output_dir=test_output_dir,\n                                log_output=ffmpeg_log_output)\n>       y2_api.get_video()\n\nmypy/tests/lib/youtube/test_y2_handler.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/youtube/y2_handler.py:166: in get_video\n    self.download_media()\nmypy/lib/youtube/y2_handler.py:128: in download_media\n    self._download_video()\nmypy/lib/youtube/y2_handler.py:100: in _download_video\n    stream_highest_res: Stream = self._video.streams.get_highest_resolution()\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/__main__.py:296: in streams\n    return StreamQuery(self.fmt_streams)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/__main__.py:188: in fmt_streams\n    extract.apply_signature(stream_manifest, self.vid_info, self.js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/extract.py:411: in apply_signature\n    cipher = Cipher(js=js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:43: in __init__\n    self.throttling_plan = get_throttling_plan(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:405: in get_throttling_plan\n    raw_code = get_throttling_function_code(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:311: in get_throttling_function_code\n    name = re.escape(get_throttling_function_name(js))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\njs = 'var _yt_player={};(function(g){var window=this;/*\\n\\n Copyright The Closure Library Authors.\\n SPDX-License-Identifie...h-this.suggestionData.length*(this.G+8),0);this.N.start(this.j,a,1E3);this.j=a;g.f1(this);c9a(this)};})(_yt_player);\\n'\n\n    def get_throttling_function_name(js: str) -> str:\n        \"\"\"Extract the name of the function that computes the throttling parameter.\n    \n        :param str js:\n            The contents of the base.js asset file.\n        :rtype: str\n        :returns:\n            The name of the function used to compute the throttling parameter.\n        \"\"\"\n        function_patterns = [\n            # https://github.com/ytdl-org/youtube-dl/issues/29326#issuecomment-865985377\n            # https://github.com/yt-dlp/yt-dlp/commit/48416bc4a8f1d5ff07d5977659cb8ece7640dcd8\n            # var Bpa = [iha];\n            # ...\n            # a.C && (b = a.get(\"n\")) && (b = Bpa[0](b), a.set(\"n\", b),\n            # Bpa.length || iha(\"\")) }};\n            # In the above case, `iha` is the relevant function name\n            r'a\\.[a-zA-Z]\\s*&&\\s*\\([a-z]\\s*=\\s*a\\.get\\(\"n\"\\)\\)\\s*&&\\s*'\n            r'\\([a-z]\\s*=\\s*([a-zA-Z0-9$]+)(\\[\\d+\\])?\\([a-z]\\)',\n        ]\n        logger.debug('Finding throttling function name')\n        for pattern in function_patterns:\n            regex = re.compile(pattern)\n            function_match = regex.search(js)\n            if function_match:\n                logger.debug(\"finished regex search, matched: %s\", pattern)\n                if len(function_match.groups()) == 1:\n                    return function_match.group(1)\n                idx = function_match.group(2)\n                if idx:\n                    idx = idx.strip(\"[]\")\n                    array = re.search(\n                        r'var {nfunc}\\s*=\\s*(\\[.+?\\]);'.format(\n                            nfunc=re.escape(function_match.group(1))),\n                        js\n                    )\n                    if array:\n                        array = array.group(1).strip(\"[]\").split(\",\")\n                        array = [x.strip() for x in array]\n                        return array[int(idx)]\n    \n>       raise RegexMatchError(\n            caller=\"get_throttling_function_name\", pattern=\"multiple\"\n        )\nE       pytube.exceptions.RegexMatchError: get_throttling_function_name: could not find match for multiple\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:296: RegexMatchError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1720624973641,"stop":1720624973641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1720631982539,"stop":1720631982540,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_output_dir","time":{"start":1720631982540,"stop":1720631982541,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    测试 ytdlp 下载视频，并且合并音视频和字幕\n    ","status":"broken","statusMessage":"pytube.exceptions.RegexMatchError: get_throttling_function_name: could not find match for multiple","statusTrace":"self = <pytube.__main__.YouTube object: videoId=fVcKBox97P0>\n\n    @property\n    def fmt_streams(self):\n        \"\"\"Returns a list of streams if they have been initialized.\n    \n        If the streams have not been initialized, finds all relevant\n        streams and initializes them.\n        \"\"\"\n        self.check_availability()\n        if self._fmt_streams:\n            return self._fmt_streams\n    \n        self._fmt_streams = []\n    \n        stream_manifest = extract.apply_descrambler(self.streaming_data)\n    \n        # If the cached js doesn't work, try fetching a new js file\n        # https://github.com/pytube/pytube/issues/1054\n        try:\n>           extract.apply_signature(stream_manifest, self.vid_info, self.js)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/__main__.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/extract.py:411: in apply_signature\n    cipher = Cipher(js=js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:43: in __init__\n    self.throttling_plan = get_throttling_plan(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:405: in get_throttling_plan\n    raw_code = get_throttling_function_code(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:311: in get_throttling_function_code\n    name = re.escape(get_throttling_function_name(js))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\njs = 'var _yt_player={};(function(g){var window=this;/*\\n\\n Copyright The Closure Library Authors.\\n SPDX-License-Identifie...h-this.suggestionData.length*(this.G+8),0);this.N.start(this.j,a,1E3);this.j=a;g.f1(this);c9a(this)};})(_yt_player);\\n'\n\n    def get_throttling_function_name(js: str) -> str:\n        \"\"\"Extract the name of the function that computes the throttling parameter.\n    \n        :param str js:\n            The contents of the base.js asset file.\n        :rtype: str\n        :returns:\n            The name of the function used to compute the throttling parameter.\n        \"\"\"\n        function_patterns = [\n            # https://github.com/ytdl-org/youtube-dl/issues/29326#issuecomment-865985377\n            # https://github.com/yt-dlp/yt-dlp/commit/48416bc4a8f1d5ff07d5977659cb8ece7640dcd8\n            # var Bpa = [iha];\n            # ...\n            # a.C && (b = a.get(\"n\")) && (b = Bpa[0](b), a.set(\"n\", b),\n            # Bpa.length || iha(\"\")) }};\n            # In the above case, `iha` is the relevant function name\n            r'a\\.[a-zA-Z]\\s*&&\\s*\\([a-z]\\s*=\\s*a\\.get\\(\"n\"\\)\\)\\s*&&\\s*'\n            r'\\([a-z]\\s*=\\s*([a-zA-Z0-9$]+)(\\[\\d+\\])?\\([a-z]\\)',\n        ]\n        logger.debug('Finding throttling function name')\n        for pattern in function_patterns:\n            regex = re.compile(pattern)\n            function_match = regex.search(js)\n            if function_match:\n                logger.debug(\"finished regex search, matched: %s\", pattern)\n                if len(function_match.groups()) == 1:\n                    return function_match.group(1)\n                idx = function_match.group(2)\n                if idx:\n                    idx = idx.strip(\"[]\")\n                    array = re.search(\n                        r'var {nfunc}\\s*=\\s*(\\[.+?\\]);'.format(\n                            nfunc=re.escape(function_match.group(1))),\n                        js\n                    )\n                    if array:\n                        array = array.group(1).strip(\"[]\").split(\",\")\n                        array = [x.strip() for x in array]\n                        return array[int(idx)]\n    \n>       raise RegexMatchError(\n            caller=\"get_throttling_function_name\", pattern=\"multiple\"\n        )\nE       pytube.exceptions.RegexMatchError: get_throttling_function_name: could not find match for multiple\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:296: RegexMatchError\n\nDuring handling of the above exception, another exception occurred:\n\ntest_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/youtube/_out/test_y2_handler'\n\n    def test_y2_video_handler(test_output_dir):\n        \"\"\"\n        测试 ytdlp 下载视频，并且合并音视频和字幕\n        \"\"\"\n        url = 'https://www.youtube.com/watch?v=fVcKBox97P0'\n        y2_api = Y2VideoHandler(video_url=url,\n                                output_dir=test_output_dir,\n                                log_output=ffmpeg_log_output)\n>       y2_api.get_video()\n\nmypy/tests/lib/youtube/test_y2_handler.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/youtube/y2_handler.py:166: in get_video\n    self.download_media()\nmypy/lib/youtube/y2_handler.py:128: in download_media\n    self._download_video()\nmypy/lib/youtube/y2_handler.py:100: in _download_video\n    stream_highest_res: Stream = self._video.streams.get_highest_resolution()\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/__main__.py:296: in streams\n    return StreamQuery(self.fmt_streams)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/__main__.py:188: in fmt_streams\n    extract.apply_signature(stream_manifest, self.vid_info, self.js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/extract.py:411: in apply_signature\n    cipher = Cipher(js=js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:43: in __init__\n    self.throttling_plan = get_throttling_plan(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:405: in get_throttling_plan\n    raw_code = get_throttling_function_code(js)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:311: in get_throttling_function_code\n    name = re.escape(get_throttling_function_name(js))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\njs = 'var _yt_player={};(function(g){var window=this;/*\\n\\n Copyright The Closure Library Authors.\\n SPDX-License-Identifie...h-this.suggestionData.length*(this.G+8),0);this.N.start(this.j,a,1E3);this.j=a;g.f1(this);c9a(this)};})(_yt_player);\\n'\n\n    def get_throttling_function_name(js: str) -> str:\n        \"\"\"Extract the name of the function that computes the throttling parameter.\n    \n        :param str js:\n            The contents of the base.js asset file.\n        :rtype: str\n        :returns:\n            The name of the function used to compute the throttling parameter.\n        \"\"\"\n        function_patterns = [\n            # https://github.com/ytdl-org/youtube-dl/issues/29326#issuecomment-865985377\n            # https://github.com/yt-dlp/yt-dlp/commit/48416bc4a8f1d5ff07d5977659cb8ece7640dcd8\n            # var Bpa = [iha];\n            # ...\n            # a.C && (b = a.get(\"n\")) && (b = Bpa[0](b), a.set(\"n\", b),\n            # Bpa.length || iha(\"\")) }};\n            # In the above case, `iha` is the relevant function name\n            r'a\\.[a-zA-Z]\\s*&&\\s*\\([a-z]\\s*=\\s*a\\.get\\(\"n\"\\)\\)\\s*&&\\s*'\n            r'\\([a-z]\\s*=\\s*([a-zA-Z0-9$]+)(\\[\\d+\\])?\\([a-z]\\)',\n        ]\n        logger.debug('Finding throttling function name')\n        for pattern in function_patterns:\n            regex = re.compile(pattern)\n            function_match = regex.search(js)\n            if function_match:\n                logger.debug(\"finished regex search, matched: %s\", pattern)\n                if len(function_match.groups()) == 1:\n                    return function_match.group(1)\n                idx = function_match.group(2)\n                if idx:\n                    idx = idx.strip(\"[]\")\n                    array = re.search(\n                        r'var {nfunc}\\s*=\\s*(\\[.+?\\]);'.format(\n                            nfunc=re.escape(function_match.group(1))),\n                        js\n                    )\n                    if array:\n                        array = array.group(1).strip(\"[]\").split(\",\")\n                        array = [x.strip() for x in array]\n                        return array[int(idx)]\n    \n>       raise RegexMatchError(\n            caller=\"get_throttling_function_name\", pattern=\"multiple\"\n        )\nE       pytube.exceptions.RegexMatchError: get_throttling_function_name: could not find match for multiple\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/pytube/cipher.py:296: RegexMatchError","steps":[],"attachments":[{"uid":"a33e561cbdfa115d","name":"log","source":"a33e561cbdfa115d.txt","type":"text/plain","size":246}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1720631993906,"stop":1720631993907,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_output_dir::0","time":{"start":1720631993907,"stop":1720631993907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"youtube"},{"name":"parentSuite","value":"lib.youtube"},{"name":"suite","value":"test_y2_handler"},{"name":"host","value":"fv-az1024-477"},{"name":"thread","value":"9012-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.youtube.test_y2_handler"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["youtube"]},"source":"ec9fedccb203d4ee.json","parameterValues":[]}