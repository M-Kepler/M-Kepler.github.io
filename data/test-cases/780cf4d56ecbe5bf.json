{"uid":"780cf4d56ecbe5bf","name":"test_ppt_topic[KimiHelper]","fullName":"lib.llm.test_llm.TestLLM#test_ppt_topic","historyId":"51f14ad7742afba1088ccdd49ea20a0e","time":{"start":1724566652513,"stop":1724566682533,"duration":30020},"description":"\n        测试生成 PPT 题目\n        ","descriptionHtml":"<pre><code>    测试生成 PPT 题目\n</code></pre>\n","status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)","statusTrace":"self = <test_llm.TestLLM object at 0x7f389042cca0>\nllm_provider = <class 'mypy.lib.llm.kimi.helper.KimiHelper'>\n\n    def test_ppt_topic(self, llm_provider):\n        \"\"\"\n        测试生成 PPT 题目\n        \"\"\"\n        print(f'----- {llm_provider.__name__} -----')\n        topic_cnt = 3\n        llm_api: OpenAIBaseHelper = llm_provider()\n        ask_msg = NurseTopic(topic_cnt=topic_cnt).prompt()\n        llm_api.ask_helper.add_ask_message(message=ask_msg)\n        result = llm_api.chat()\n        print(result)\n>       result = json.loads(result)\n\nmypy/tests/lib/llm/test_llm.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f38b9ca4070>\ns = '[\\n  “神经内科偏瘫患者康复护理实践与思考”,\\n  “心内科急性心肌梗死患者护理质量持续改进项目”,\\n  “肿瘤科化疗患者皮肤护理品管圈活动总结”\\n]'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1724560060600,"stop":1724560060601,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1724566636544,"stop":1724566636546,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1724567320966,"stop":1724567320966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"lib.llm"},{"name":"suite","value":"test_llm"},{"name":"subSuite","value":"TestLLM"},{"name":"host","value":"fv-az837-604"},{"name":"thread","value":"8838-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.llm.test_llm"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"llm_provider","value":"<class 'mypy.lib.llm.kimi.helper.KimiHelper'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"780cf4d56ecbe5bf.json","parameterValues":["<class 'mypy.lib.llm.kimi.helper.KimiHelper'>"]}