{"uid":"e2984baa44b12354","name":"test_ppt2video_with_content_summary","fullName":"lib.subtitle.test_ppt2video_with_content_summary#test_ppt2video_with_content_summary","historyId":"b26acf47d8cb7a4fe14c1e58454489e7","time":{"start":1724425425699,"stop":1724425425713,"duration":14},"status":"broken","statusMessage":"FileExistsError: [Errno 17] File exists: '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'","statusTrace":"test_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'\n\n    @pytest.mark.asyncio\n    async def test_ppt2video_with_content_summary(test_output_dir):\n        output_video_path = os.path.join(test_output_dir, f'{curr_func_name()}.mp4')\n        # 把 PPT 图片拷贝过来\n        with FileUtil.copy_file_context([\n                Assets.ppt_slide_image_dir, Assets.ppt_content_summary], test_output_dir) as (ppt_slide_image_dir, summary_file):\n            # 把文件夹下的东西拷贝出来\n>           shutil.copytree(ppt_slide_image_dir, test_output_dir)\n\nmypy/tests/lib/subtitle/test_ppt2video_with_content_summary.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/shutil.py:568: in copytree\n    return _copytree(entries=entries, src=src, dst=dst, symlinks=symlinks,\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/shutil.py:467: in _copytree\n    os.makedirs(dst, exist_ok=dirs_exist_ok)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'\nmode = 511, exist_ok = False\n\n    def makedirs(name, mode=0o777, exist_ok=False):\n        \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    \n        Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n        mkdir, except that any intermediate path segment (not just the rightmost)\n        will be created if it does not exist. If the target directory already\n        exists, raise an OSError if exist_ok is False. Otherwise no exception is\n        raised.  This is recursive.\n    \n        \"\"\"\n        head, tail = path.split(name)\n        if not tail:\n            head, tail = path.split(head)\n        if head and tail and not path.exists(head):\n            try:\n                makedirs(head, exist_ok=exist_ok)\n            except FileExistsError:\n                # Defeats race condition when another thread created the path\n                pass\n            cdir = curdir\n            if isinstance(tail, bytes):\n                cdir = bytes(curdir, 'ASCII')\n            if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n                return\n        try:\n>           mkdir(name, mode)\nE           FileExistsError: [Errno 17] File exists: '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/os.py:225: FileExistsError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1724418389991,"stop":1724418389991,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1724425425696,"stop":1724425425697,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_output_dir","time":{"start":1724425425698,"stop":1724425425698,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1724425425698,"stop":1724425425699,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"FileExistsError: [Errno 17] File exists: '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'","statusTrace":"test_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'\n\n    @pytest.mark.asyncio\n    async def test_ppt2video_with_content_summary(test_output_dir):\n        output_video_path = os.path.join(test_output_dir, f'{curr_func_name()}.mp4')\n        # 把 PPT 图片拷贝过来\n        with FileUtil.copy_file_context([\n                Assets.ppt_slide_image_dir, Assets.ppt_content_summary], test_output_dir) as (ppt_slide_image_dir, summary_file):\n            # 把文件夹下的东西拷贝出来\n>           shutil.copytree(ppt_slide_image_dir, test_output_dir)\n\nmypy/tests/lib/subtitle/test_ppt2video_with_content_summary.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/shutil.py:568: in copytree\n    return _copytree(entries=entries, src=src, dst=dst, symlinks=symlinks,\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/shutil.py:467: in _copytree\n    os.makedirs(dst, exist_ok=dirs_exist_ok)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'\nmode = 511, exist_ok = False\n\n    def makedirs(name, mode=0o777, exist_ok=False):\n        \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    \n        Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n        mkdir, except that any intermediate path segment (not just the rightmost)\n        will be created if it does not exist. If the target directory already\n        exists, raise an OSError if exist_ok is False. Otherwise no exception is\n        raised.  This is recursive.\n    \n        \"\"\"\n        head, tail = path.split(name)\n        if not tail:\n            head, tail = path.split(head)\n        if head and tail and not path.exists(head):\n            try:\n                makedirs(head, exist_ok=exist_ok)\n            except FileExistsError:\n                # Defeats race condition when another thread created the path\n                pass\n            cdir = curdir\n            if isinstance(tail, bytes):\n                cdir = bytes(curdir, 'ASCII')\n            if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n                return\n        try:\n>           mkdir(name, mode)\nE           FileExistsError: [Errno 17] File exists: '/home/runner/work/github-runner/github-runner/mypy/tests/lib/subtitle/_out/test_ppt2video_with_content_summary'\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/os.py:225: FileExistsError","steps":[],"attachments":[{"uid":"c2e9ef8b14624057","name":"log","source":"c2e9ef8b14624057.txt","type":"text/plain","size":986}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1724425425822,"stop":1724425425822,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1724425425822,"stop":1724425425822,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1724425425822,"stop":1724425425822,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1724425425822,"stop":1724425425822,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_output_dir::0","time":{"start":1724425425823,"stop":1724425425823,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir::finish_callback","time":{"start":1724425425823,"stop":1724425425824,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"lib.subtitle"},{"name":"suite","value":"test_ppt2video_with_content_summary"},{"name":"host","value":"fv-az1016-466"},{"name":"thread","value":"8923-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.subtitle.test_ppt2video_with_content_summary"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["asyncio"]},"source":"e2984baa44b12354.json","parameterValues":[]}