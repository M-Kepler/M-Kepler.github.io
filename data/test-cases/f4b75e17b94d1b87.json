{"uid":"f4b75e17b94d1b87","name":"test_ppt2douyin[video]","fullName":"apps.ppt2douyin.test_ppt2douyin#test_ppt2douyin","historyId":"648144a04894eb8a1dbe15f6c9795674","time":{"start":1717416207842,"stop":1717416258634,"duration":50792},"status":"broken","statusMessage":"ffmpeg._run.Error: ffmpeg error (see stderr output for detail)","statusTrace":"publish_media_type = 'video'\n\n    @pytest.mark.parametrize('publish_media_type', [\n        Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO],\n        ids=[Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO])\n    def test_ppt2douyin(publish_media_type):\n        set_publish_cfg(config_path=config_path,\n                        option='media_type',\n                        value=publish_media_type)\n    \n        # XXX 因为要读取当前目录下的 config 文件\n        # 所以不要传入 test_output_dir\n>       main(work_path=curr_dir)\n\nmypy/tests/apps/ppt2douyin/test_ppt2douyin.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/apps/ppt2douyin/main.py:51: in main\n    raise ex\nmypy/apps/ppt2douyin/main.py:45: in main\n    PPTPublishHelper(work_path=work_path,\nmypy/apps/ppt2douyin/video2douyin.py:184: in batch_publish\n    return self.batch_publish_video()\nmypy/apps/ppt2douyin/video2douyin.py:105: in batch_publish_video\n    tmp_video_output_path = PPTVideoHandler(\nmypy/apps/ppt2douyin/video_handler.py:124: in handle\n    raise ex\nmypy/apps/ppt2douyin/video_handler.py:119: in handle\n    self.make_video(input_video=selected_video,\nmypy/apps/ppt2douyin/video_handler.py:81: in make_video\n    VideoClipHelper.mix_with_green_screen(input_video=pre_handled_output,\nmypy/lib/video/video_clip_helper.py:302: in mix_with_green_screen\n    Image2VideoByFFmpeg.image2video(green_media, green_screen_video)\nmypy/lib/video/ffmpeg_pro.py:476: in image2video\n    ffmpeg\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstream_spec = output(crf=23, filename='/home/runner/work/github-runner/github-runner/mypy/assets/video/green_screen_background/22_crop.mp4', pix_fmt='yuv420p', r=1, t=2, vcodec='libx264')[None] <78dcdc054382>\ncmd = 'ffmpeg', capture_stdout = False, capture_stderr = False, input = None\nquiet = True, overwrite_output = False\n\n    @output_operator()\n    def run(\n        stream_spec,\n        cmd='ffmpeg',\n        capture_stdout=False,\n        capture_stderr=False,\n        input=None,\n        quiet=False,\n        overwrite_output=False,\n    ):\n        \"\"\"Invoke ffmpeg for the supplied node graph.\n    \n        Args:\n            capture_stdout: if True, capture stdout (to be used with\n                ``pipe:`` ffmpeg outputs).\n            capture_stderr: if True, capture stderr.\n            quiet: shorthand for setting ``capture_stdout`` and ``capture_stderr``.\n            input: text to be sent to stdin (to be used with ``pipe:``\n                ffmpeg inputs)\n            **kwargs: keyword-arguments passed to ``get_args()`` (e.g.\n                ``overwrite_output=True``).\n    \n        Returns: (out, err) tuple containing captured stdout and stderr data.\n        \"\"\"\n        process = run_async(\n            stream_spec,\n            cmd,\n            pipe_stdin=input is not None,\n            pipe_stdout=capture_stdout,\n            pipe_stderr=capture_stderr,\n            quiet=quiet,\n            overwrite_output=overwrite_output,\n        )\n        out, err = process.communicate(input)\n        retcode = process.poll()\n        if retcode:\n>           raise Error('ffmpeg', out, err)\nE           ffmpeg._run.Error: ffmpeg error (see stderr output for detail)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/ffmpeg/_run.py:325: Error","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1717415271185,"stop":1717415271185,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1717415319458,"stop":1717415319459,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"ffmpeg._run.Error: ffmpeg error (see stderr output for detail)","statusTrace":"publish_media_type = 'video'\n\n    @pytest.mark.parametrize('publish_media_type', [\n        Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO],\n        ids=[Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO])\n    def test_ppt2douyin(publish_media_type):\n        set_publish_cfg(config_path=config_path,\n                        option='media_type',\n                        value=publish_media_type)\n    \n        # XXX 因为要读取当前目录下的 config 文件\n        # 所以不要传入 test_output_dir\n>       main(work_path=curr_dir)\n\nmypy/tests/apps/ppt2douyin/test_ppt2douyin.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/apps/ppt2douyin/main.py:51: in main\n    raise ex\nmypy/apps/ppt2douyin/main.py:45: in main\n    PPTPublishHelper(work_path=work_path,\nmypy/apps/ppt2douyin/video2douyin.py:184: in batch_publish\n    return self.batch_publish_video()\nmypy/apps/ppt2douyin/video2douyin.py:105: in batch_publish_video\n    tmp_video_output_path = PPTVideoHandler(\nmypy/apps/ppt2douyin/video_handler.py:124: in handle\n    raise ex\nmypy/apps/ppt2douyin/video_handler.py:119: in handle\n    self.make_video(input_video=selected_video,\nmypy/apps/ppt2douyin/video_handler.py:81: in make_video\n    VideoClipHelper.mix_with_green_screen(input_video=pre_handled_output,\nmypy/lib/video/video_clip_helper.py:302: in mix_with_green_screen\n    Image2VideoByFFmpeg.image2video(green_media, green_screen_video)\nmypy/lib/video/ffmpeg_pro.py:476: in image2video\n    ffmpeg\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstream_spec = output(crf=23, filename='/home/runner/work/github-runner/github-runner/mypy/assets/video/green_screen_background/22_crop.mp4', pix_fmt='yuv420p', r=1, t=2, vcodec='libx264')[None] <78dcdc054382>\ncmd = 'ffmpeg', capture_stdout = False, capture_stderr = False, input = None\nquiet = True, overwrite_output = False\n\n    @output_operator()\n    def run(\n        stream_spec,\n        cmd='ffmpeg',\n        capture_stdout=False,\n        capture_stderr=False,\n        input=None,\n        quiet=False,\n        overwrite_output=False,\n    ):\n        \"\"\"Invoke ffmpeg for the supplied node graph.\n    \n        Args:\n            capture_stdout: if True, capture stdout (to be used with\n                ``pipe:`` ffmpeg outputs).\n            capture_stderr: if True, capture stderr.\n            quiet: shorthand for setting ``capture_stdout`` and ``capture_stderr``.\n            input: text to be sent to stdin (to be used with ``pipe:``\n                ffmpeg inputs)\n            **kwargs: keyword-arguments passed to ``get_args()`` (e.g.\n                ``overwrite_output=True``).\n    \n        Returns: (out, err) tuple containing captured stdout and stderr data.\n        \"\"\"\n        process = run_async(\n            stream_spec,\n            cmd,\n            pipe_stdin=input is not None,\n            pipe_stdout=capture_stdout,\n            pipe_stderr=capture_stderr,\n            quiet=quiet,\n            overwrite_output=overwrite_output,\n        )\n        out, err = process.communicate(input)\n        retcode = process.poll()\n        if retcode:\n>           raise Error('ffmpeg', out, err)\nE           ffmpeg._run.Error: ffmpeg error (see stderr output for detail)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/ffmpeg/_run.py:325: Error","steps":[],"attachments":[{"uid":"3a78361e71adc8ba","name":"log","source":"3a78361e71adc8ba.txt","type":"text/plain","size":5706}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1717416258677,"stop":1717416258677,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"apps.ppt2douyin"},{"name":"suite","value":"test_ppt2douyin"},{"name":"host","value":"fv-az777-346"},{"name":"thread","value":"7252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"apps.ppt2douyin.test_ppt2douyin"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"publish_media_type","value":"'video'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f4b75e17b94d1b87.json","parameterValues":["'video'"]}