{"uid":"eb553c0017754e46","name":"test_llm_api[kimi]","fullName":"lib.llm.test_llm_api#test_llm_api","historyId":"3ae6278c170a38d95419239a4d914f3b","time":{"start":1721362444806,"stop":1721362449699,"duration":4893},"description":"\n    测试 llm API（封装了全部已对接的 LLM）\n    ","descriptionHtml":"<pre><code>测试 llm API（封装了全部已对接的 LLM）\n</code></pre>\n","status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)","statusTrace":"llm_provider = <class 'mypy.lib.llm.kimi.helper.KimiHelper'>\n\n    @pytest.mark.parametrize('llm_provider', [None, KimiHelper],\n                             ids=['try_all', 'kimi'])\n    def test_llm_api(llm_provider):\n        \"\"\"\n        测试 llm API（封装了全部已对接的 LLM）\n        \"\"\"\n        api = LLMHelper(llm_provider=llm_provider)\n        ppt_topic_cnt = 3\n        prompts = NursePPT.gen_ppt_topics(ppt_topic_cnt)\n        result = api.chat(prompts)\n>       result = json.loads(result)\n\nmypy/tests/lib/llm/test_llm_api.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa050c57070>\ns = '[\\n  “急诊科护理团队建设与挑战”,\\n  “手术室护理安全事件分析与预防”,\\n  “内科优质护理服务实践与思考”\\n]', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1721356792499,"stop":1721356792500,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"copy_config_to_dir","time":{"start":1721362430070,"stop":1721362430072,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"description":"\n    测试 llm API（封装了全部已对接的 LLM）\n    ","status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)","statusTrace":"llm_provider = <class 'mypy.lib.llm.kimi.helper.KimiHelper'>\n\n    @pytest.mark.parametrize('llm_provider', [None, KimiHelper],\n                             ids=['try_all', 'kimi'])\n    def test_llm_api(llm_provider):\n        \"\"\"\n        测试 llm API（封装了全部已对接的 LLM）\n        \"\"\"\n        api = LLMHelper(llm_provider=llm_provider)\n        ppt_topic_cnt = 3\n        prompts = NursePPT.gen_ppt_topics(ppt_topic_cnt)\n        result = api.chat(prompts)\n>       result = json.loads(result)\n\nmypy/tests/lib/llm/test_llm_api.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa050c57070>\ns = '[\\n  “急诊科护理团队建设与挑战”,\\n  “手术室护理安全事件分析与预防”,\\n  “内科优质护理服务实践与思考”\\n]', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","steps":[],"attachments":[{"uid":"3540d96531913979","name":"log","source":"3540d96531913979.txt","type":"text/plain","size":86}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1721362519648,"stop":1721362519649,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"lib.llm"},{"name":"suite","value":"test_llm_api"},{"name":"host","value":"fv-az1487-369"},{"name":"thread","value":"8924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.llm.test_llm_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"llm_provider","value":"<class 'mypy.lib.llm.kimi.helper.KimiHelper'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"eb553c0017754e46.json","parameterValues":["<class 'mypy.lib.llm.kimi.helper.KimiHelper'>"]}