{"uid":"d38db576a60779d","name":"test_ffmpeg_pro","fullName":"lib.video.test_ffmpeg_pro#test_ffmpeg_pro","historyId":"e60d8e6b06c671b46252041e24abbee9","time":{"start":1715521668493,"stop":1715521668646,"duration":153},"description":"\n    1. 合并音视频\n    2. 添加中英文字幕\n    3. 调整视频清晰度\n    4. 裁剪视频边缘\n    5. 裁剪视频片头片尾\n    6. 视频前两秒添加文字标题\n    7. 添加水印\n    8. 添加 bgm\n    ","descriptionHtml":"<pre><code>1. 合并音视频\n2. 添加中英文字幕\n3. 调整视频清晰度\n4. 裁剪视频边缘\n5. 裁剪视频片头片尾\n6. 视频前两秒添加文字标题\n7. 添加水印\n8. 添加 bgm\n</code></pre>\n","status":"broken","statusMessage":"ffmpeg._run.Error: ffprobe error (see stderr output for detail)","statusTrace":"test_output_dir = '/home/runner/work/Python/Python/mypy/tests/lib/video/_out/test_ffmpeg_pro'\n\n    def test_ffmpeg_pro(test_output_dir):\n        \"\"\"\n        1. 合并音视频\n        2. 添加中英文字幕\n        3. 调整视频清晰度\n        4. 裁剪视频边缘\n        5. 裁剪视频片头片尾\n        6. 视频前两秒添加文字标题\n        7. 添加水印\n        8. 添加 bgm\n        \"\"\"\n        output_video = os.path.join(\n            test_output_dir, curr_func_name() + '.mp4')\n    \n        # 示例用法\n        api = FFmpegProHelper(input_video=input_video,\n                              input_audio=input_audio)\n    \n        # 视频过滤器链\n        v_zh_srt_stream = api.add_subtitles(input_srt=input_zh_srt,\n                                            font_style=zh_font_style)\n        v_en_srt_stream = api.add_subtitles(pre_stream=v_zh_srt_stream,\n                                            input_srt=input_en_srt,\n                                            font_style=en_font_style)\n        v_adjuest_stream = api.adjust_contrast_saturation(\n            pre_stream=v_en_srt_stream)\n        v_crop_stream = api.crop_video(pre_stream=v_adjuest_stream)\n        v_trim_stream, _ = api.video_trim(start_trim=6, pre_stream=v_crop_stream)\n    \n        draw_text_stream = api.draw_text('哈哈哈哈哈哈哈哈哈哈哈哈哈哈',\n                                         pre_stream=v_trim_stream)\n        v_watermark_stream = api.add_watermark(input_watermark=input_watermark,\n                                               pre_stream=draw_text_stream)\n    \n        # 音频过滤器链\n>       bgm_stream = api.add_bgm(input_bgm)\n\nmypy/tests/lib/video/test_ffmpeg_pro.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/video/ffmpeg_pro.py:163: in add_bgm\n    ffmpeg.probe(input_bgm)['streams'][0]['duration'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfilename = '/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3'\ncmd = 'ffprobe', kwargs = {}\nargs = ['ffprobe', '-show_format', '-show_streams', '-of', 'json', '/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3']\np = <Popen: returncode: 1 args: ['ffprobe', '-show_format', '-show_streams', '-o...>\nout = b'{\\n\\n}\\n'\nerr = b'ffprobe version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2007-2021 the FFmpeg developers\\n  built with gcc 11 (Ubuntu 11...   55.  9.100 / 55.  9.100\\n/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3: No such file or directory\\n'\n\n    def probe(filename, cmd='ffprobe', **kwargs):\n        \"\"\"Run ffprobe on the specified file and return a JSON representation of the output.\n    \n        Raises:\n            :class:`ffmpeg.Error`: if ffprobe returns a non-zero exit code,\n                an :class:`Error` is returned with a generic error message.\n                The stderr output can be retrieved by accessing the\n                ``stderr`` property of the exception.\n        \"\"\"\n        args = [cmd, '-show_format', '-show_streams', '-of', 'json']\n        args += convert_kwargs_to_cmd_line_args(kwargs)\n        args += [filename]\n    \n        p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = p.communicate()\n        if p.returncode != 0:\n>           raise Error('ffprobe', out, err)\nE           ffmpeg._run.Error: ffprobe error (see stderr output for detail)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/ffmpeg/_probe.py:23: Error","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1715519457720,"stop":1715519457720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1715521668490,"stop":1715521668492,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_output_dir","time":{"start":1715521668492,"stop":1715521668492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    1. 合并音视频\n    2. 添加中英文字幕\n    3. 调整视频清晰度\n    4. 裁剪视频边缘\n    5. 裁剪视频片头片尾\n    6. 视频前两秒添加文字标题\n    7. 添加水印\n    8. 添加 bgm\n    ","status":"broken","statusMessage":"ffmpeg._run.Error: ffprobe error (see stderr output for detail)","statusTrace":"test_output_dir = '/home/runner/work/Python/Python/mypy/tests/lib/video/_out/test_ffmpeg_pro'\n\n    def test_ffmpeg_pro(test_output_dir):\n        \"\"\"\n        1. 合并音视频\n        2. 添加中英文字幕\n        3. 调整视频清晰度\n        4. 裁剪视频边缘\n        5. 裁剪视频片头片尾\n        6. 视频前两秒添加文字标题\n        7. 添加水印\n        8. 添加 bgm\n        \"\"\"\n        output_video = os.path.join(\n            test_output_dir, curr_func_name() + '.mp4')\n    \n        # 示例用法\n        api = FFmpegProHelper(input_video=input_video,\n                              input_audio=input_audio)\n    \n        # 视频过滤器链\n        v_zh_srt_stream = api.add_subtitles(input_srt=input_zh_srt,\n                                            font_style=zh_font_style)\n        v_en_srt_stream = api.add_subtitles(pre_stream=v_zh_srt_stream,\n                                            input_srt=input_en_srt,\n                                            font_style=en_font_style)\n        v_adjuest_stream = api.adjust_contrast_saturation(\n            pre_stream=v_en_srt_stream)\n        v_crop_stream = api.crop_video(pre_stream=v_adjuest_stream)\n        v_trim_stream, _ = api.video_trim(start_trim=6, pre_stream=v_crop_stream)\n    \n        draw_text_stream = api.draw_text('哈哈哈哈哈哈哈哈哈哈哈哈哈哈',\n                                         pre_stream=v_trim_stream)\n        v_watermark_stream = api.add_watermark(input_watermark=input_watermark,\n                                               pre_stream=draw_text_stream)\n    \n        # 音频过滤器链\n>       bgm_stream = api.add_bgm(input_bgm)\n\nmypy/tests/lib/video/test_ffmpeg_pro.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/video/ffmpeg_pro.py:163: in add_bgm\n    ffmpeg.probe(input_bgm)['streams'][0]['duration'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfilename = '/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3'\ncmd = 'ffprobe', kwargs = {}\nargs = ['ffprobe', '-show_format', '-show_streams', '-of', 'json', '/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3']\np = <Popen: returncode: 1 args: ['ffprobe', '-show_format', '-show_streams', '-o...>\nout = b'{\\n\\n}\\n'\nerr = b'ffprobe version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2007-2021 the FFmpeg developers\\n  built with gcc 11 (Ubuntu 11...   55.  9.100 / 55.  9.100\\n/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3: No such file or directory\\n'\n\n    def probe(filename, cmd='ffprobe', **kwargs):\n        \"\"\"Run ffprobe on the specified file and return a JSON representation of the output.\n    \n        Raises:\n            :class:`ffmpeg.Error`: if ffprobe returns a non-zero exit code,\n                an :class:`Error` is returned with a generic error message.\n                The stderr output can be retrieved by accessing the\n                ``stderr`` property of the exception.\n        \"\"\"\n        args = [cmd, '-show_format', '-show_streams', '-of', 'json']\n        args += convert_kwargs_to_cmd_line_args(kwargs)\n        args += [filename]\n    \n        p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = p.communicate()\n        if p.returncode != 0:\n>           raise Error('ffprobe', out, err)\nE           ffmpeg._run.Error: ffprobe error (see stderr output for detail)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/ffmpeg/_probe.py:23: Error","steps":[],"attachments":[{"uid":"1e43a762b0b8765","name":"log","source":"1e43a762b0b8765.txt","type":"text/plain","size":146}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"test_output_dir::0","time":{"start":1715522015988,"stop":1715522015988,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir::finish_callback","time":{"start":1715522015988,"stop":1715522015989,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"video"},{"name":"parentSuite","value":"lib.video"},{"name":"suite","value":"test_ffmpeg_pro"},{"name":"host","value":"fv-az926-195"},{"name":"thread","value":"6423-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.video.test_ffmpeg_pro"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["video"]},"source":"d38db576a60779d.json","parameterValues":[]}