{"uid":"665fef61e2582047","name":"test_llm_api[try_all]","fullName":"lib.llm.test_llm_api#test_llm_api","historyId":"857bdbd069a93cd161e93858484f2582","time":{"start":1720630272851,"stop":1720630277914,"duration":5063},"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)","statusTrace":"llm_provider = None\n\n    @pytest.mark.parametrize('llm_provider', [None, KimiHelper],\n                             ids=['try_all', 'kimi'])\n    def test_llm_api(llm_provider):\n        api = LLMHelper(llm_provider=llm_provider)\n        ppt_topic_cnt = 3\n        prompts = NursePPT.gen_ppt_topics(ppt_topic_cnt)\n        result = api.auto_chat(prompts)\n>       result = json.loads(result)\n\nmypy/tests/lib/llm/test_llm_api.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f985b88d070>\ns = '[\\n  “食品营养与合理膳食的科学搭配”,\\n  “心脑血管疾病防治与健康生活方式”,\\n  “中医药在儿童青少年健康管理中的应用”\\n]'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1720624973641,"stop":1720624973641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1720630272849,"stop":1720630272851,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)","statusTrace":"llm_provider = None\n\n    @pytest.mark.parametrize('llm_provider', [None, KimiHelper],\n                             ids=['try_all', 'kimi'])\n    def test_llm_api(llm_provider):\n        api = LLMHelper(llm_provider=llm_provider)\n        ppt_topic_cnt = 3\n        prompts = NursePPT.gen_ppt_topics(ppt_topic_cnt)\n        result = api.auto_chat(prompts)\n>       result = json.loads(result)\n\nmypy/tests/lib/llm/test_llm_api.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f985b88d070>\ns = '[\\n  “食品营养与合理膳食的科学搭配”,\\n  “心脑血管疾病防治与健康生活方式”,\\n  “中医药在儿童青少年健康管理中的应用”\\n]'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","steps":[],"attachments":[{"uid":"e97a9e72d8beea0a","name":"log","source":"e97a9e72d8beea0a.txt","type":"text/plain","size":154}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1720630323762,"stop":1720630323763,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"lib.llm"},{"name":"suite","value":"test_llm_api"},{"name":"host","value":"fv-az1024-477"},{"name":"thread","value":"9012-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.llm.test_llm_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"llm_provider","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"665fef61e2582047.json","parameterValues":["None"]}