{"uid":"b061ae1909c75ad5","name":"test_ppt2douyin[image_article]","fullName":"apps.ppt2douyin.test_ppt2douyin#test_ppt2douyin","historyId":"a9458fb56e629795ad944536f1a9c902","time":{"start":1714649550680,"stop":1714649562005,"duration":11325},"status":"broken","statusMessage":"pdf2image.exceptions.PDFPageCountError: Unable to get page count.\nI/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/<e6><b6><88><e5><8c><96><e5><86><85><e7><a7><91><e6><8a><a4><e5><a3><ab><e9><95><bf><e7><ab><9e><e8><81><98>.pdf': No such file or directory.","statusTrace":"pdf_path = '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/消化内科护士长竞聘.pdf'\nuserpw = None, ownerpw = None, poppler_path = None, rawdates = False\ntimeout = None, first_page = None, last_page = None\n\n    def pdfinfo_from_path(\n        pdf_path: str,\n        userpw: str = None,\n        ownerpw: str = None,\n        poppler_path: str = None,\n        rawdates: bool = False,\n        timeout: int = None,\n        first_page: int = None,\n        last_page: int = None,\n    ) -> Dict:\n        \"\"\"Function wrapping poppler's pdfinfo utility and returns the result as a dictionary.\n    \n        :param pdf_path: Path to the PDF that you want to convert\n        :type pdf_path: str\n        :param userpw: PDF's password, defaults to None\n        :type userpw: str, optional\n        :param ownerpw: PDF's owner password, defaults to None\n        :type ownerpw: str, optional\n        :param poppler_path: Path to look for poppler binaries, defaults to None\n        :type poppler_path: Union[str, PurePath], optional\n        :param rawdates: Return the undecoded data strings, defaults to False\n        :type rawdates: bool, optional\n        :param timeout: Raise PDFPopplerTimeoutError after the given time, defaults to None\n        :type timeout: int, optional\n        :param first_page: First page to process, defaults to None\n        :type first_page: int, optional\n        :param last_page: Last page to process before stopping, defaults to None\n        :type last_page: int, optional\n        :raises PDFPopplerTimeoutError: Raised after the timeout for the image processing is exceeded\n        :raises PDFInfoNotInstalledError: Raised if pdfinfo is not installed\n        :raises PDFPageCountError: Raised if the output could not be parsed\n        :return: Dictionary containing various information on the PDF\n        :rtype: Dict\n        \"\"\"\n        try:\n            command = [_get_command_path(\"pdfinfo\", poppler_path), pdf_path]\n    \n            if userpw is not None:\n                command.extend([\"-upw\", userpw])\n    \n            if ownerpw is not None:\n                command.extend([\"-opw\", ownerpw])\n    \n            if rawdates:\n                command.extend([\"-rawdates\"])\n    \n            if first_page:\n                command.extend([\"-f\", str(first_page)])\n    \n            if last_page:\n                command.extend([\"-l\", str(last_page)])\n    \n            # Add poppler path to LD_LIBRARY_PATH\n            env = os.environ.copy()\n            if poppler_path is not None:\n                env[\"LD_LIBRARY_PATH\"] = poppler_path + \":\" + env.get(\"LD_LIBRARY_PATH\", \"\")\n            proc = Popen(command, env=env, stdout=PIPE, stderr=PIPE)\n    \n            try:\n                out, err = proc.communicate(timeout=timeout)\n            except TimeoutExpired:\n                proc.kill()\n                outs, errs = proc.communicate()\n                raise PDFPopplerTimeoutError(\"Run poppler poppler timeout.\")\n    \n            d = {}\n            for field in out.decode(\"utf8\", \"ignore\").split(\"\\n\"):\n                sf = field.split(\":\")\n                key, value = sf[0], \":\".join(sf[1:])\n                if key != \"\":\n                    d[key] = (\n                        int(value.strip())\n                        if key in PDFINFO_CONVERT_TO_INT\n                        else value.strip()\n                    )\n    \n            if \"Pages\" not in d:\n>               raise ValueError\nE               ValueError\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pdf2image/pdf2image.py:602: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\npublish_media_type = 'image_article'\n\n    @pytest.mark.parametrize('publish_media_type', [\n        Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO],\n        ids=[Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO])\n    def test_ppt2douyin(publish_media_type):\n        set_publish_cfg(config_path=config_path,\n                        option='media_type',\n                        value=publish_media_type)\n    \n>       main(work_path=curr_dir)\n\nmypy/tests/apps/ppt2douyin/test_ppt2douyin.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/apps/ppt2douyin/main.py:35: in main\n    raise ex\nmypy/apps/ppt2douyin/main.py:23: in main\n    ppt_transfer.batch_ppt2transfer()\nmypy/apps/ppt2douyin/ppt2video.py:118: in batch_ppt2transfer\n    self._ppt_trans(ppt_file)\nmypy/apps/ppt2douyin/ppt2video.py:102: in _ppt_trans\n    raise ex\nmypy/apps/ppt2douyin/ppt2video.py:99: in _ppt_trans\n    self._ppt_handler(ppt_path, output_path)\nmypy/apps/ppt2douyin/ppt2video.py:49: in ppt2image_group\n    ppt2image(ppt_path, tmp_output_dir)\nmypy/lib/ppt/ppt_handler.py:69: in ppt2image\n    pdf_handler.pdf2image(image_dir=output_path,\nmypy/lib/pdf/pdf_handler.py:51: in pdf2image\n    images = convert_from_path(self._input_pdf_path)\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pdf2image/pdf2image.py:127: in convert_from_path\n    page_count = pdfinfo_from_path(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npdf_path = '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/消化内科护士长竞聘.pdf'\nuserpw = None, ownerpw = None, poppler_path = None, rawdates = False\ntimeout = None, first_page = None, last_page = None\n\n    def pdfinfo_from_path(\n        pdf_path: str,\n        userpw: str = None,\n        ownerpw: str = None,\n        poppler_path: str = None,\n        rawdates: bool = False,\n        timeout: int = None,\n        first_page: int = None,\n        last_page: int = None,\n    ) -> Dict:\n        \"\"\"Function wrapping poppler's pdfinfo utility and returns the result as a dictionary.\n    \n        :param pdf_path: Path to the PDF that you want to convert\n        :type pdf_path: str\n        :param userpw: PDF's password, defaults to None\n        :type userpw: str, optional\n        :param ownerpw: PDF's owner password, defaults to None\n        :type ownerpw: str, optional\n        :param poppler_path: Path to look for poppler binaries, defaults to None\n        :type poppler_path: Union[str, PurePath], optional\n        :param rawdates: Return the undecoded data strings, defaults to False\n        :type rawdates: bool, optional\n        :param timeout: Raise PDFPopplerTimeoutError after the given time, defaults to None\n        :type timeout: int, optional\n        :param first_page: First page to process, defaults to None\n        :type first_page: int, optional\n        :param last_page: Last page to process before stopping, defaults to None\n        :type last_page: int, optional\n        :raises PDFPopplerTimeoutError: Raised after the timeout for the image processing is exceeded\n        :raises PDFInfoNotInstalledError: Raised if pdfinfo is not installed\n        :raises PDFPageCountError: Raised if the output could not be parsed\n        :return: Dictionary containing various information on the PDF\n        :rtype: Dict\n        \"\"\"\n        try:\n            command = [_get_command_path(\"pdfinfo\", poppler_path), pdf_path]\n    \n            if userpw is not None:\n                command.extend([\"-upw\", userpw])\n    \n            if ownerpw is not None:\n                command.extend([\"-opw\", ownerpw])\n    \n            if rawdates:\n                command.extend([\"-rawdates\"])\n    \n            if first_page:\n                command.extend([\"-f\", str(first_page)])\n    \n            if last_page:\n                command.extend([\"-l\", str(last_page)])\n    \n            # Add poppler path to LD_LIBRARY_PATH\n            env = os.environ.copy()\n            if poppler_path is not None:\n                env[\"LD_LIBRARY_PATH\"] = poppler_path + \":\" + env.get(\"LD_LIBRARY_PATH\", \"\")\n            proc = Popen(command, env=env, stdout=PIPE, stderr=PIPE)\n    \n            try:\n                out, err = proc.communicate(timeout=timeout)\n            except TimeoutExpired:\n                proc.kill()\n                outs, errs = proc.communicate()\n                raise PDFPopplerTimeoutError(\"Run poppler poppler timeout.\")\n    \n            d = {}\n            for field in out.decode(\"utf8\", \"ignore\").split(\"\\n\"):\n                sf = field.split(\":\")\n                key, value = sf[0], \":\".join(sf[1:])\n                if key != \"\":\n                    d[key] = (\n                        int(value.strip())\n                        if key in PDFINFO_CONVERT_TO_INT\n                        else value.strip()\n                    )\n    \n            if \"Pages\" not in d:\n                raise ValueError\n    \n            return d\n    \n        except OSError:\n            raise PDFInfoNotInstalledError(\n                \"Unable to get page count. Is poppler installed and in PATH?\"\n            )\n        except ValueError:\n>           raise PDFPageCountError(\n                f\"Unable to get page count.\\n{err.decode('utf8', 'ignore')}\"\n            )\nE           pdf2image.exceptions.PDFPageCountError: Unable to get page count.\nE           I/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/<e6><b6><88><e5><8c><96><e5><86><85><e7><a7><91><e6><8a><a4><e5><a3><ab><e9><95><bf><e7><ab><9e><e8><81><98>.pdf': No such file or directory.\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pdf2image/pdf2image.py:611: PDFPageCountError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1714649392879,"stop":1714649392880,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"pdf2image.exceptions.PDFPageCountError: Unable to get page count.\nI/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/<e6><b6><88><e5><8c><96><e5><86><85><e7><a7><91><e6><8a><a4><e5><a3><ab><e9><95><bf><e7><ab><9e><e8><81><98>.pdf': No such file or directory.","statusTrace":"pdf_path = '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/消化内科护士长竞聘.pdf'\nuserpw = None, ownerpw = None, poppler_path = None, rawdates = False\ntimeout = None, first_page = None, last_page = None\n\n    def pdfinfo_from_path(\n        pdf_path: str,\n        userpw: str = None,\n        ownerpw: str = None,\n        poppler_path: str = None,\n        rawdates: bool = False,\n        timeout: int = None,\n        first_page: int = None,\n        last_page: int = None,\n    ) -> Dict:\n        \"\"\"Function wrapping poppler's pdfinfo utility and returns the result as a dictionary.\n    \n        :param pdf_path: Path to the PDF that you want to convert\n        :type pdf_path: str\n        :param userpw: PDF's password, defaults to None\n        :type userpw: str, optional\n        :param ownerpw: PDF's owner password, defaults to None\n        :type ownerpw: str, optional\n        :param poppler_path: Path to look for poppler binaries, defaults to None\n        :type poppler_path: Union[str, PurePath], optional\n        :param rawdates: Return the undecoded data strings, defaults to False\n        :type rawdates: bool, optional\n        :param timeout: Raise PDFPopplerTimeoutError after the given time, defaults to None\n        :type timeout: int, optional\n        :param first_page: First page to process, defaults to None\n        :type first_page: int, optional\n        :param last_page: Last page to process before stopping, defaults to None\n        :type last_page: int, optional\n        :raises PDFPopplerTimeoutError: Raised after the timeout for the image processing is exceeded\n        :raises PDFInfoNotInstalledError: Raised if pdfinfo is not installed\n        :raises PDFPageCountError: Raised if the output could not be parsed\n        :return: Dictionary containing various information on the PDF\n        :rtype: Dict\n        \"\"\"\n        try:\n            command = [_get_command_path(\"pdfinfo\", poppler_path), pdf_path]\n    \n            if userpw is not None:\n                command.extend([\"-upw\", userpw])\n    \n            if ownerpw is not None:\n                command.extend([\"-opw\", ownerpw])\n    \n            if rawdates:\n                command.extend([\"-rawdates\"])\n    \n            if first_page:\n                command.extend([\"-f\", str(first_page)])\n    \n            if last_page:\n                command.extend([\"-l\", str(last_page)])\n    \n            # Add poppler path to LD_LIBRARY_PATH\n            env = os.environ.copy()\n            if poppler_path is not None:\n                env[\"LD_LIBRARY_PATH\"] = poppler_path + \":\" + env.get(\"LD_LIBRARY_PATH\", \"\")\n            proc = Popen(command, env=env, stdout=PIPE, stderr=PIPE)\n    \n            try:\n                out, err = proc.communicate(timeout=timeout)\n            except TimeoutExpired:\n                proc.kill()\n                outs, errs = proc.communicate()\n                raise PDFPopplerTimeoutError(\"Run poppler poppler timeout.\")\n    \n            d = {}\n            for field in out.decode(\"utf8\", \"ignore\").split(\"\\n\"):\n                sf = field.split(\":\")\n                key, value = sf[0], \":\".join(sf[1:])\n                if key != \"\":\n                    d[key] = (\n                        int(value.strip())\n                        if key in PDFINFO_CONVERT_TO_INT\n                        else value.strip()\n                    )\n    \n            if \"Pages\" not in d:\n>               raise ValueError\nE               ValueError\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pdf2image/pdf2image.py:602: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\npublish_media_type = 'image_article'\n\n    @pytest.mark.parametrize('publish_media_type', [\n        Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO],\n        ids=[Const.MEDIA_TYPE_IMG_ARTICLE, Const.MEDIA_TYPE_VIDEO])\n    def test_ppt2douyin(publish_media_type):\n        set_publish_cfg(config_path=config_path,\n                        option='media_type',\n                        value=publish_media_type)\n    \n>       main(work_path=curr_dir)\n\nmypy/tests/apps/ppt2douyin/test_ppt2douyin.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/apps/ppt2douyin/main.py:35: in main\n    raise ex\nmypy/apps/ppt2douyin/main.py:23: in main\n    ppt_transfer.batch_ppt2transfer()\nmypy/apps/ppt2douyin/ppt2video.py:118: in batch_ppt2transfer\n    self._ppt_trans(ppt_file)\nmypy/apps/ppt2douyin/ppt2video.py:102: in _ppt_trans\n    raise ex\nmypy/apps/ppt2douyin/ppt2video.py:99: in _ppt_trans\n    self._ppt_handler(ppt_path, output_path)\nmypy/apps/ppt2douyin/ppt2video.py:49: in ppt2image_group\n    ppt2image(ppt_path, tmp_output_dir)\nmypy/lib/ppt/ppt_handler.py:69: in ppt2image\n    pdf_handler.pdf2image(image_dir=output_path,\nmypy/lib/pdf/pdf_handler.py:51: in pdf2image\n    images = convert_from_path(self._input_pdf_path)\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pdf2image/pdf2image.py:127: in convert_from_path\n    page_count = pdfinfo_from_path(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npdf_path = '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/消化内科护士长竞聘.pdf'\nuserpw = None, ownerpw = None, poppler_path = None, rawdates = False\ntimeout = None, first_page = None, last_page = None\n\n    def pdfinfo_from_path(\n        pdf_path: str,\n        userpw: str = None,\n        ownerpw: str = None,\n        poppler_path: str = None,\n        rawdates: bool = False,\n        timeout: int = None,\n        first_page: int = None,\n        last_page: int = None,\n    ) -> Dict:\n        \"\"\"Function wrapping poppler's pdfinfo utility and returns the result as a dictionary.\n    \n        :param pdf_path: Path to the PDF that you want to convert\n        :type pdf_path: str\n        :param userpw: PDF's password, defaults to None\n        :type userpw: str, optional\n        :param ownerpw: PDF's owner password, defaults to None\n        :type ownerpw: str, optional\n        :param poppler_path: Path to look for poppler binaries, defaults to None\n        :type poppler_path: Union[str, PurePath], optional\n        :param rawdates: Return the undecoded data strings, defaults to False\n        :type rawdates: bool, optional\n        :param timeout: Raise PDFPopplerTimeoutError after the given time, defaults to None\n        :type timeout: int, optional\n        :param first_page: First page to process, defaults to None\n        :type first_page: int, optional\n        :param last_page: Last page to process before stopping, defaults to None\n        :type last_page: int, optional\n        :raises PDFPopplerTimeoutError: Raised after the timeout for the image processing is exceeded\n        :raises PDFInfoNotInstalledError: Raised if pdfinfo is not installed\n        :raises PDFPageCountError: Raised if the output could not be parsed\n        :return: Dictionary containing various information on the PDF\n        :rtype: Dict\n        \"\"\"\n        try:\n            command = [_get_command_path(\"pdfinfo\", poppler_path), pdf_path]\n    \n            if userpw is not None:\n                command.extend([\"-upw\", userpw])\n    \n            if ownerpw is not None:\n                command.extend([\"-opw\", ownerpw])\n    \n            if rawdates:\n                command.extend([\"-rawdates\"])\n    \n            if first_page:\n                command.extend([\"-f\", str(first_page)])\n    \n            if last_page:\n                command.extend([\"-l\", str(last_page)])\n    \n            # Add poppler path to LD_LIBRARY_PATH\n            env = os.environ.copy()\n            if poppler_path is not None:\n                env[\"LD_LIBRARY_PATH\"] = poppler_path + \":\" + env.get(\"LD_LIBRARY_PATH\", \"\")\n            proc = Popen(command, env=env, stdout=PIPE, stderr=PIPE)\n    \n            try:\n                out, err = proc.communicate(timeout=timeout)\n            except TimeoutExpired:\n                proc.kill()\n                outs, errs = proc.communicate()\n                raise PDFPopplerTimeoutError(\"Run poppler poppler timeout.\")\n    \n            d = {}\n            for field in out.decode(\"utf8\", \"ignore\").split(\"\\n\"):\n                sf = field.split(\":\")\n                key, value = sf[0], \":\".join(sf[1:])\n                if key != \"\":\n                    d[key] = (\n                        int(value.strip())\n                        if key in PDFINFO_CONVERT_TO_INT\n                        else value.strip()\n                    )\n    \n            if \"Pages\" not in d:\n                raise ValueError\n    \n            return d\n    \n        except OSError:\n            raise PDFInfoNotInstalledError(\n                \"Unable to get page count. Is poppler installed and in PATH?\"\n            )\n        except ValueError:\n>           raise PDFPageCountError(\n                f\"Unable to get page count.\\n{err.decode('utf8', 'ignore')}\"\n            )\nE           pdf2image.exceptions.PDFPageCountError: Unable to get page count.\nE           I/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/tests/apps/ppt2douyin/<e6><b6><88><e5><8c><96><e5><86><85><e7><a7><91><e6><8a><a4><e5><a3><ab><e9><95><bf><e7><ab><9e><e8><81><98>.pdf': No such file or directory.\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pdf2image/pdf2image.py:611: PDFPageCountError","steps":[],"attachments":[{"uid":"fe5a9c6e652468b3","name":"log","source":"fe5a9c6e652468b3.txt","type":"text/plain","size":5075}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"apps.ppt2douyin"},{"name":"suite","value":"test_ppt2douyin"},{"name":"host","value":"fv-az1758-722"},{"name":"thread","value":"6405-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"apps.ppt2douyin.test_ppt2douyin"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"publish_media_type","value":"'image_article'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b061ae1909c75ad5.json","parameterValues":["'image_article'"]}