{"uid":"deca81e5318500df","name":"test_get_video_duration[_get_audio_duration]","fullName":"lib.video.test_ffprobe_helper#test_get_video_duration","historyId":"85b7e5323c09e49b01db645051fe7fad","time":{"start":1715522016068,"stop":1715522016129,"duration":61},"status":"broken","statusMessage":"ffmpy.FFRuntimeError: `ffprobe -v error -show_entries format=duration -of json -i /home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3` exited with status 1\n\nSTDOUT:\n{\n\n}\n\n\nSTDERR:","statusTrace":"input = '/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3'\n\n    @pytest.mark.parametrize('input', [\n        Assets.ted_video, Assets.bgm], ids=['_get_video_duration', '_get_audio_duration'])\n    def test_get_video_duration(input):\n>       FFprobeHelper.get_duration(input)\n\nmypy/tests/lib/video/test_ffprobe_helper.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/video/ffprobe_helper.py:27: in get_duration\n    result = ffprobe.run(stdout=subprocess.PIPE)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <'FFprobe' 'ffprobe -v error -show_entries format=duration -of json -i /home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3'>\ninput_data = None, stdout = -1, stderr = None, env = None, kwargs = {}\nout = (b'{\\n\\n}\\n', None)\n\n    def run(self, input_data=None, stdout=None, stderr=None, env=None, **kwargs):\n        \"\"\"Execute FFmpeg command line.\n    \n        ``input_data`` can contain input for FFmpeg in case ``pipe`` protocol is used for input.\n        ``stdout`` and ``stderr`` specify where to redirect the ``stdout`` and ``stderr`` of the\n        process. By default no redirection is done, which means all output goes to running shell\n        (this mode should normally only be used for debugging purposes). If FFmpeg ``pipe`` protocol\n        is used for output, ``stdout`` must be redirected to a pipe by passing `subprocess.PIPE` as\n        ``stdout`` argument. You can pass custom environment to ffmpeg process with ``env``.\n    \n        Returns a 2-tuple containing ``stdout`` and ``stderr`` of the process. If there was no\n        redirection or if the output was redirected to e.g. `os.devnull`, the value returned will\n        be a tuple of two `None` values, otherwise it will contain the actual ``stdout`` and\n        ``stderr`` data returned by ffmpeg process.\n    \n        More info about ``pipe`` protocol `here <https://ffmpeg.org/ffmpeg-protocols.html#pipe>`_.\n    \n        :param str input_data: input data for FFmpeg to deal with (audio, video etc.) as bytes (e.g.\n            the result of reading a file in binary mode)\n        :param stdout: redirect FFmpeg ``stdout`` there (default is `None` which means no\n            redirection)\n        :param stderr: redirect FFmpeg ``stderr`` there (default is `None` which means no\n            redirection)\n        :param env: custom environment for ffmpeg process\n        :param kwargs: any other keyword arguments to be forwarded to `subprocess.Popen\n            <https://docs.python.org/3/library/subprocess.html#subprocess.Popen>`_\n        :return: a 2-tuple containing ``stdout`` and ``stderr`` of the process\n        :rtype: tuple\n        :raise: `FFRuntimeError` in case FFmpeg command exits with a non-zero code;\n            `FFExecutableNotFoundError` in case the executable path passed was not valid\n        \"\"\"\n        try:\n            self.process = subprocess.Popen(\n                self._cmd,\n                stdin=subprocess.PIPE,\n                stdout=stdout,\n                stderr=stderr,\n                env=env,\n                **kwargs\n            )\n        except OSError as e:\n            if e.errno == errno.ENOENT:\n                raise FFExecutableNotFoundError(\n                    \"Executable '{0}' not found\".format(self.executable)\n                )\n            else:\n                raise\n    \n        out = self.process.communicate(input=input_data)\n        if self.process.returncode != 0:\n>           raise FFRuntimeError(self.cmd, self.process.returncode, out[0], out[1])\nE           ffmpy.FFRuntimeError: `ffprobe -v error -show_entries format=duration -of json -i /home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3` exited with status 1\nE           \nE           STDOUT:\nE           {\nE           \nE           }\nE           \nE           \nE           STDERR:\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/ffmpy.py:113: FFRuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1715519457720,"stop":1715519457720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1715522015992,"stop":1715522015993,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1715522016290,"stop":1715522016291,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"video"},{"name":"parentSuite","value":"lib.video"},{"name":"suite","value":"test_ffprobe_helper"},{"name":"host","value":"fv-az926-195"},{"name":"thread","value":"6423-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.video.test_ffprobe_helper"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"input","value":"'/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["video"]},"source":"deca81e5318500df.json","parameterValues":["'/home/runner/work/Python/Python/mypy/assets/media/ppt_bgm.mp3'"]}