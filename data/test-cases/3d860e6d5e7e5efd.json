{"uid":"3d860e6d5e7e5efd","name":"test_add_opening","fullName":"lib.video.test_ffmpeg_pro#test_add_opening","historyId":"825c6ef5d6370bcd2461d5ce31c1e3fd","time":{"start":1715239810929,"stop":1715240063397,"duration":252468},"status":"broken","statusMessage":"ffmpeg._run.Error: ffmpeg error (see stderr output for detail)","statusTrace":"test_output_dir = '/home/runner/work/Python/Python/mypy/tests/lib/video/_out/test_ffmpeg_pro'\n\n    def test_add_opening(test_output_dir):\n        output_dir = os.path.join(\n            test_output_dir, curr_func_name() + '.mp4')\n        api = FFmpegProHelper(input_video=Assets.video)\n    \n        v_watermark_stream = api.add_watermark(\n            input_watermark=input_watermark, pre_stream=api.video_stream)\n    \n        v_add_opening_stream = api.add_opening_closing(\n            pre_stream=v_watermark_stream, opening_video=Assets.short_video)\n    \n>       api.run(streams=[v_add_opening_stream, api.audio_stream],\n                output_path=output_dir, quiet=False)\n\nmypy/tests/lib/video/test_ffmpeg_pro.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/video/ffmpeg_pro.py:99: in run\n    ffmpeg.output(*streams, output_path).run(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstream_spec = output(filename='/home/runner/work/Python/Python/mypy/tests/lib/video/_out/test_ffmpeg_pro/test_add_opening.mp4')[None] <1c9223bfde0d>\ncmd = 'ffmpeg', capture_stdout = False, capture_stderr = False, input = None\nquiet = False, overwrite_output = True\n\n    @output_operator()\n    def run(\n        stream_spec,\n        cmd='ffmpeg',\n        capture_stdout=False,\n        capture_stderr=False,\n        input=None,\n        quiet=False,\n        overwrite_output=False,\n    ):\n        \"\"\"Invoke ffmpeg for the supplied node graph.\n    \n        Args:\n            capture_stdout: if True, capture stdout (to be used with\n                ``pipe:`` ffmpeg outputs).\n            capture_stderr: if True, capture stderr.\n            quiet: shorthand for setting ``capture_stdout`` and ``capture_stderr``.\n            input: text to be sent to stdin (to be used with ``pipe:``\n                ffmpeg inputs)\n            **kwargs: keyword-arguments passed to ``get_args()`` (e.g.\n                ``overwrite_output=True``).\n    \n        Returns: (out, err) tuple containing captured stdout and stderr data.\n        \"\"\"\n        process = run_async(\n            stream_spec,\n            cmd,\n            pipe_stdin=input is not None,\n            pipe_stdout=capture_stdout,\n            pipe_stderr=capture_stderr,\n            quiet=quiet,\n            overwrite_output=overwrite_output,\n        )\n        out, err = process.communicate(input)\n        retcode = process.poll()\n        if retcode:\n>           raise Error('ffmpeg', out, err)\nE           ffmpeg._run.Error: ffmpeg error (see stderr output for detail)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/ffmpeg/_run.py:325: Error","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1715236488701,"stop":1715236488702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"copy_config_to_dir","time":{"start":1715239284094,"stop":1715239284095,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"test_output_dir","time":{"start":1715239284095,"stop":1715239284096,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"afterStages":[{"name":"test_output_dir::0","time":{"start":1715240063422,"stop":1715240063422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"copy_config_to_dir::finish_callback","time":{"start":1715240063423,"stop":1715240063423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"video"},{"name":"parentSuite","value":"lib.video"},{"name":"suite","value":"test_ffmpeg_pro"},{"name":"host","value":"fv-az1145-772"},{"name":"thread","value":"6357-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.video.test_ffmpeg_pro"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["video"]},"source":"3d860e6d5e7e5efd.json","parameterValues":[]}