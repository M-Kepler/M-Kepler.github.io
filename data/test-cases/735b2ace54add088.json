{"uid":"735b2ace54add088","name":"test_ytdlp_helper","fullName":"lib.youtube.test_ytdlp_helper#test_ytdlp_helper","historyId":"511e468cfe87e4155bee1036db365e03","time":{"start":1723826225538,"stop":1723826226324,"duration":786},"description":"\n    测试 ytdlp 下载 youtu 视频资源\n    ","descriptionHtml":"<pre><code>测试 ytdlp 下载 youtu 视频资源\n</code></pre>\n","status":"broken","statusMessage":"yt_dlp.utils.DownloadError: ERROR: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more","statusTrace":"self = <yt_dlp.YoutubeDL.YoutubeDL object at 0x7fecb442e310>\nargs = ('https://www.youtube.com/shorts/GSaYtNZnqR8', <yt_dlp.extractor.youtube.YoutubeIE object at 0x7fecb442ec40>, False, {}, True)\nkwargs = {}\n\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        while True:\n            try:\n>               return func(self, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1626: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1761: in __extract_info\n    ie_result = ie.extract(url)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/common.py:740: in extract\n    ie_result = self._real_extract(url)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/youtube.py:4358: in _real_extract\n    self.raise_no_formats(reason, expected=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <yt_dlp.extractor.youtube.YoutubeIE object at 0x7fecb442ec40>\nmsg = 'Sign in to confirm you’re not a bot. This helps protect our community. Learn more'\nexpected = True, video_id = None\n\n    def raise_no_formats(self, msg, expected=False, video_id=None):\n        if expected and (\n                self.get_param('ignore_no_formats_error') or self.get_param('wait_for_video')):\n            self.report_warning(msg, video_id)\n        elif isinstance(msg, ExtractorError):\n            raise msg\n        else:\n>           raise ExtractorError(msg, expected=expected, video_id=video_id)\nE           yt_dlp.utils.ExtractorError: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/common.py:1263: ExtractorError\n\nDuring handling of the above exception, another exception occurred:\n\ntest_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/youtube/_out/test_ytdlp_helper'\n\n    def test_ytdlp_helper(test_output_dir):\n        \"\"\"\n        测试 ytdlp 下载 youtu 视频资源\n        \"\"\"\n>       api = YtdlpHelper(log_output=False,\n                          video_url=test_video_url,\n                          download_dir=test_output_dir,\n                          clean_tmp_output=True)\n\nmypy/tests/lib/youtube/test_ytdlp_helper.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/youtube/ytdlp_helper.py:75: in __init__\n    self._title, self._video_id, self._publish_date = get_video_info(\nmypy/lib/youtube/ytdlp_helper.py:62: in get_video_info\n    info_dict = ydl.extract_info(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1615: in extract_info\n    return self.__extract_info(url, self.get_info_extractor(key), download, extra_info, process)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1644: in wrapper\n    self.report_error(str(e), e.format_traceback())\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1092: in report_error\n    self.trouble(f'{self._format_err(\"ERROR:\", self.Styles.ERROR)} {message}', *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <yt_dlp.YoutubeDL.YoutubeDL object at 0x7fecb442e310>\nmessage = 'ERROR: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more'\ntb = '  File \"/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/common.py\", line 740, in ...ctor/common.py\", line 1263, in raise_no_formats\\n    raise ExtractorError(msg, expected=expected, video_id=video_id)\\n'\nis_error = True\n\n    def trouble(self, message=None, tb=None, is_error=True):\n        \"\"\"Determine action to take when a download problem appears.\n    \n        Depending on if the downloader has been configured to ignore\n        download errors or not, this method may throw an exception or\n        not when errors are found, after printing the message.\n    \n        @param tb          If given, is additional traceback information\n        @param is_error    Whether to raise error according to ignorerrors\n        \"\"\"\n        if message is not None:\n            self.to_stderr(message)\n        if self.params.get('verbose'):\n            if tb is None:\n                if sys.exc_info()[0]:  # if .trouble has been called from an except block\n                    tb = ''\n                    if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                        tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                    tb += encode_compat_str(traceback.format_exc())\n                else:\n                    tb_data = traceback.format_list(traceback.extract_stack())\n                    tb = ''.join(tb_data)\n            if tb:\n                self.to_stderr(tb)\n        if not is_error:\n            return\n        if not self.params.get('ignoreerrors'):\n            if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                exc_info = sys.exc_info()[1].exc_info\n            else:\n                exc_info = sys.exc_info()\n>           raise DownloadError(message, exc_info)\nE           yt_dlp.utils.DownloadError: ERROR: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1031: DownloadError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1723815350385,"stop":1723815350385,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1723826223820,"stop":1723826223822,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"test_output_dir","time":{"start":1723826225537,"stop":1723826225538,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    测试 ytdlp 下载 youtu 视频资源\n    ","status":"broken","statusMessage":"yt_dlp.utils.DownloadError: ERROR: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more","statusTrace":"self = <yt_dlp.YoutubeDL.YoutubeDL object at 0x7fecb442e310>\nargs = ('https://www.youtube.com/shorts/GSaYtNZnqR8', <yt_dlp.extractor.youtube.YoutubeIE object at 0x7fecb442ec40>, False, {}, True)\nkwargs = {}\n\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        while True:\n            try:\n>               return func(self, *args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1626: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1761: in __extract_info\n    ie_result = ie.extract(url)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/common.py:740: in extract\n    ie_result = self._real_extract(url)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/youtube.py:4358: in _real_extract\n    self.raise_no_formats(reason, expected=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <yt_dlp.extractor.youtube.YoutubeIE object at 0x7fecb442ec40>\nmsg = 'Sign in to confirm you’re not a bot. This helps protect our community. Learn more'\nexpected = True, video_id = None\n\n    def raise_no_formats(self, msg, expected=False, video_id=None):\n        if expected and (\n                self.get_param('ignore_no_formats_error') or self.get_param('wait_for_video')):\n            self.report_warning(msg, video_id)\n        elif isinstance(msg, ExtractorError):\n            raise msg\n        else:\n>           raise ExtractorError(msg, expected=expected, video_id=video_id)\nE           yt_dlp.utils.ExtractorError: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/common.py:1263: ExtractorError\n\nDuring handling of the above exception, another exception occurred:\n\ntest_output_dir = '/home/runner/work/github-runner/github-runner/mypy/tests/lib/youtube/_out/test_ytdlp_helper'\n\n    def test_ytdlp_helper(test_output_dir):\n        \"\"\"\n        测试 ytdlp 下载 youtu 视频资源\n        \"\"\"\n>       api = YtdlpHelper(log_output=False,\n                          video_url=test_video_url,\n                          download_dir=test_output_dir,\n                          clean_tmp_output=True)\n\nmypy/tests/lib/youtube/test_ytdlp_helper.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/youtube/ytdlp_helper.py:75: in __init__\n    self._title, self._video_id, self._publish_date = get_video_info(\nmypy/lib/youtube/ytdlp_helper.py:62: in get_video_info\n    info_dict = ydl.extract_info(\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1615: in extract_info\n    return self.__extract_info(url, self.get_info_extractor(key), download, extra_info, process)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1644: in wrapper\n    self.report_error(str(e), e.format_traceback())\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1092: in report_error\n    self.trouble(f'{self._format_err(\"ERROR:\", self.Styles.ERROR)} {message}', *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <yt_dlp.YoutubeDL.YoutubeDL object at 0x7fecb442e310>\nmessage = 'ERROR: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more'\ntb = '  File \"/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/extractor/common.py\", line 740, in ...ctor/common.py\", line 1263, in raise_no_formats\\n    raise ExtractorError(msg, expected=expected, video_id=video_id)\\n'\nis_error = True\n\n    def trouble(self, message=None, tb=None, is_error=True):\n        \"\"\"Determine action to take when a download problem appears.\n    \n        Depending on if the downloader has been configured to ignore\n        download errors or not, this method may throw an exception or\n        not when errors are found, after printing the message.\n    \n        @param tb          If given, is additional traceback information\n        @param is_error    Whether to raise error according to ignorerrors\n        \"\"\"\n        if message is not None:\n            self.to_stderr(message)\n        if self.params.get('verbose'):\n            if tb is None:\n                if sys.exc_info()[0]:  # if .trouble has been called from an except block\n                    tb = ''\n                    if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                        tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                    tb += encode_compat_str(traceback.format_exc())\n                else:\n                    tb_data = traceback.format_list(traceback.extract_stack())\n                    tb = ''.join(tb_data)\n            if tb:\n                self.to_stderr(tb)\n        if not is_error:\n            return\n        if not self.params.get('ignoreerrors'):\n            if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                exc_info = sys.exc_info()[1].exc_info\n            else:\n                exc_info = sys.exc_info()\n>           raise DownloadError(message, exc_info)\nE           yt_dlp.utils.DownloadError: ERROR: [youtube] GSaYtNZnqR8: Sign in to confirm you’re not a bot. This helps protect our community. Learn more\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/yt_dlp/YoutubeDL.py:1031: DownloadError","steps":[],"attachments":[{"uid":"28fcea5fc8e9e0e3","name":"log","source":"28fcea5fc8e9e0e3.txt","type":"text/plain","size":164}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"test_output_dir::0","time":{"start":1723826227379,"stop":1723826227380,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir::finish_callback","time":{"start":1723826227380,"stop":1723826227381,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"youtube"},{"name":"parentSuite","value":"lib.youtube"},{"name":"suite","value":"test_ytdlp_helper"},{"name":"host","value":"fv-az730-133"},{"name":"thread","value":"8891-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.youtube.test_ytdlp_helper"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["youtube"]},"source":"735b2ace54add088.json","parameterValues":[]}