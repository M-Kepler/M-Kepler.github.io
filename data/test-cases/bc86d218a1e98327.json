{"uid":"bc86d218a1e98327","name":"test_logger_filename","fullName":"lib.test_log#test_logger_filename","historyId":"901cfb7a0c62ce3f02d30978a80a1834","time":{"start":1722316618501,"stop":1722316618503,"duration":2},"description":"\n    日志输出中，文件名是否正确\n    ","descriptionHtml":"<pre><code>日志输出中，文件名是否正确\n</code></pre>\n","status":"skipped","statusMessage":"XFAIL 如果日志格式不包含文件名，则可能失败\n\nAssertionError: assert None is not None\n +  where None = <function search at 0x7f8ea25f5f70>('\\\\[test_log.py:\\\\d+\\\\]: .*test message for logging', '\uD83D\uDFE2 test message for logging\\n')\n +    where <function search at 0x7f8ea25f5f70> = re.search\n +    and   '\uD83D\uDFE2 test message for logging\\n' = CaptureResult(out='\uD83D\uDFE2 test message for logging\\n', err='').out","statusTrace":"capsys = <_pytest.capture.CaptureFixture object at 0x7f8e602860a0>\n\n    @pytest.mark.xfail(reason='如果日志格式不包含文件名，则可能失败')\n    def test_logger_filename(capsys):\n        \"\"\"\n        日志输出中，文件名是否正确\n        \"\"\"\n        logger = get_logger(__name__)\n        test_message = \"test message for logging\"\n    \n        # 记录一条日志\n        logger.info(test_message)\n    \n        # 使用 capsys 来捕获日志输出\n        captured = capsys.readouterr()\n        print(captured)\n    \n        # 检查输出中是否包含正确的文件名\n        expected_filename = os.path.basename(__file__)\n        print(expected_filename)\n        print(captured.out)\n        # 正则匹配，确保日志中出现了当前文件的文件名\n>       assert re.search(\n            rf\"\\[{expected_filename}:\\d+\\]: .*{test_message}\", captured.out) is not None\nE       AssertionError: assert None is not None\nE        +  where None = <function search at 0x7f8ea25f5f70>('\\\\[test_log.py:\\\\d+\\\\]: .*test message for logging', '\uD83D\uDFE2 test message for logging\\n')\nE        +    where <function search at 0x7f8ea25f5f70> = re.search\nE        +    and   '\uD83D\uDFE2 test message for logging\\n' = CaptureResult(out='\uD83D\uDFE2 test message for logging\\n', err='').out\n\nmypy/tests/lib/test_log.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1722305315533,"stop":1722305315534,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1722316618499,"stop":1722316618501,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"capsys","time":{"start":1722316618501,"stop":1722316618501,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    日志输出中，文件名是否正确\n    ","status":"skipped","statusMessage":"XFAIL 如果日志格式不包含文件名，则可能失败\n\nAssertionError: assert None is not None\n +  where None = <function search at 0x7f8ea25f5f70>('\\\\[test_log.py:\\\\d+\\\\]: .*test message for logging', '\uD83D\uDFE2 test message for logging\\n')\n +    where <function search at 0x7f8ea25f5f70> = re.search\n +    and   '\uD83D\uDFE2 test message for logging\\n' = CaptureResult(out='\uD83D\uDFE2 test message for logging\\n', err='').out","statusTrace":"capsys = <_pytest.capture.CaptureFixture object at 0x7f8e602860a0>\n\n    @pytest.mark.xfail(reason='如果日志格式不包含文件名，则可能失败')\n    def test_logger_filename(capsys):\n        \"\"\"\n        日志输出中，文件名是否正确\n        \"\"\"\n        logger = get_logger(__name__)\n        test_message = \"test message for logging\"\n    \n        # 记录一条日志\n        logger.info(test_message)\n    \n        # 使用 capsys 来捕获日志输出\n        captured = capsys.readouterr()\n        print(captured)\n    \n        # 检查输出中是否包含正确的文件名\n        expected_filename = os.path.basename(__file__)\n        print(expected_filename)\n        print(captured.out)\n        # 正则匹配，确保日志中出现了当前文件的文件名\n>       assert re.search(\n            rf\"\\[{expected_filename}:\\d+\\]: .*{test_message}\", captured.out) is not None\nE       AssertionError: assert None is not None\nE        +  where None = <function search at 0x7f8ea25f5f70>('\\\\[test_log.py:\\\\d+\\\\]: .*test message for logging', '\uD83D\uDFE2 test message for logging\\n')\nE        +    where <function search at 0x7f8ea25f5f70> = re.search\nE        +    and   '\uD83D\uDFE2 test message for logging\\n' = CaptureResult(out='\uD83D\uDFE2 test message for logging\\n', err='').out\n\nmypy/tests/lib/test_log.py:31: AssertionError","steps":[],"attachments":[{"uid":"7eb66011c401ab8e","name":"log","source":"7eb66011c401ab8e.txt","type":"text/plain","size":62}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"capsys::0","time":{"start":1722316618508,"stop":1722316618508,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir::finish_callback","time":{"start":1722316618552,"stop":1722316618552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='如果日志格式不包含文件名，则可能失败')"},{"name":"tag","value":"lib"},{"name":"parentSuite","value":"lib"},{"name":"suite","value":"test_log"},{"name":"host","value":"fv-az775-767"},{"name":"thread","value":"8968-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.test_log"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail(reason='如果日志格式不包含文件名，则可能失败')","lib"]},"source":"bc86d218a1e98327.json","parameterValues":[]}