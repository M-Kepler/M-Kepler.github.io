{"uid":"ce13a3b9c00889d8","name":"test_y2douyin_once[playlist]","fullName":"apps.youtu2douyin.test_youtu2douyin#test_y2douyin_once","historyId":"ce404f85784e602676f6c453ae493197","time":{"start":1726827604004,"stop":1726827605523,"duration":1519},"description":"\n    检测一次 youtube 的频道\n    ","descriptionHtml":"<pre><code>检测一次 youtube 的频道\n</code></pre>\n","status":"broken","statusMessage":"ValueError: time data 'None' does not match format '%Y-%m-%d %H:%M:%S'","statusTrace":"coll_handler = <class 'mypy.lib.youtube.core.base.YouTubePlaylist'>\n\n    @pytest.mark.parametrize('coll_handler',\n                             [YouTubePlaylist, YouTubeChannel],\n                             ids=['playlist', 'channel'])\n    def test_y2douyin_once(coll_handler):\n        \"\"\"\n        检测一次 youtube 的频道\n        \"\"\"\n        upd_channel_to_latest(\n            record_file_dir=os.path.join(curr_dir, 'config'),\n            coll_handler=coll_handler)\n>       main(run_mod=Config.RUN_MOD_ONCE,\n             coll_handler=coll_handler,\n             work_path=curr_dir)\n\nmypy/tests/apps/youtu2douyin/test_youtu2douyin.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/apps/youtu2douyin/main.py:47: in main\n    api.do_once()\nmypy/apps/youtu2douyin/channel_loop.py:303: in do_once\n    new_channel_videos = self._collect_channel_medias(\nmypy/apps/youtu2douyin/channel_loop.py:262: in _collect_channel_medias\n    recored_videos[:] = sorted(\nmypy/apps/youtu2douyin/channel_loop.py:264: in <lambda>\n    key=lambda x: self._parse_date(x['publish_date']))\nmypy/apps/youtu2douyin/channel_loop.py:196: in _parse_date\n    return datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None', format = '%Y-%m-%d %H:%M:%S'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None' does not match format '%Y-%m-%d %H:%M:%S'\n\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/_strptime.py:349: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1726825585676,"stop":1726825585676,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1726827576456,"stop":1726827576457,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    检测一次 youtube 的频道\n    ","status":"broken","statusMessage":"ValueError: time data 'None' does not match format '%Y-%m-%d %H:%M:%S'","statusTrace":"coll_handler = <class 'mypy.lib.youtube.core.base.YouTubePlaylist'>\n\n    @pytest.mark.parametrize('coll_handler',\n                             [YouTubePlaylist, YouTubeChannel],\n                             ids=['playlist', 'channel'])\n    def test_y2douyin_once(coll_handler):\n        \"\"\"\n        检测一次 youtube 的频道\n        \"\"\"\n        upd_channel_to_latest(\n            record_file_dir=os.path.join(curr_dir, 'config'),\n            coll_handler=coll_handler)\n>       main(run_mod=Config.RUN_MOD_ONCE,\n             coll_handler=coll_handler,\n             work_path=curr_dir)\n\nmypy/tests/apps/youtu2douyin/test_youtu2douyin.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/apps/youtu2douyin/main.py:47: in main\n    api.do_once()\nmypy/apps/youtu2douyin/channel_loop.py:303: in do_once\n    new_channel_videos = self._collect_channel_medias(\nmypy/apps/youtu2douyin/channel_loop.py:262: in _collect_channel_medias\n    recored_videos[:] = sorted(\nmypy/apps/youtu2douyin/channel_loop.py:264: in <lambda>\n    key=lambda x: self._parse_date(x['publish_date']))\nmypy/apps/youtu2douyin/channel_loop.py:196: in _parse_date\n    return datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/_strptime.py:568: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'None', format = '%Y-%m-%d %H:%M:%S'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'None' does not match format '%Y-%m-%d %H:%M:%S'\n\n/opt/hostedtoolcache/Python/3.9.20/x64/lib/python3.9/_strptime.py:349: ValueError","steps":[],"attachments":[{"uid":"9b474c4b731358ef","name":"log","source":"9b474c4b731358ef.txt","type":"text/plain","size":1003}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1726827628203,"stop":1726827628204,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"app"},{"name":"parentSuite","value":"apps.youtu2douyin"},{"name":"suite","value":"test_youtu2douyin"},{"name":"host","value":"fv-az654-555"},{"name":"thread","value":"9906-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"apps.youtu2douyin.test_youtu2douyin"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"coll_handler","value":"<class 'mypy.lib.youtube.core.base.YouTubePlaylist'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["app"]},"source":"ce13a3b9c00889d8.json","parameterValues":["<class 'mypy.lib.youtube.core.base.YouTubePlaylist'>"]}