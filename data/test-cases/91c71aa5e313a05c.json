{"uid":"91c71aa5e313a05c","name":"test_pdf2image_by_pdftoppm","fullName":"lib.pdf.test_pdf_handler#test_pdf2image_by_pdftoppm","historyId":"164933ae2ed50950ab1e4399f92bef35","time":{"start":1715239129834,"stop":1715239129858,"duration":24},"description":"\n    测试通过 poppler/pdftoppm 工具进行转换\n    ","descriptionHtml":"<pre><code>测试通过 poppler/pdftoppm 工具进行转换\n</code></pre>\n","status":"broken","statusMessage":"Exception: 命令: ['pdftoppm', '-jpeg', '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf', '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler/test_pdf2image_by_pdftoppm/slide'] 执行失败，输出: I/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf': No such file or directory.","statusTrace":"test_output_dir = '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler'\n\n    def test_pdf2image_by_pdftoppm(test_output_dir):\n        \"\"\"\n        测试通过 poppler/pdftoppm 工具进行转换\n        \"\"\"\n        output_image_dir = os.path.join(\n            test_output_dir, curr_func_name())\n        os.makedirs(output_image_dir, exist_ok=True)\n        api = PDFHandler(Assets.pdf)\n>       api.pdf2image_by_pdftoppm(output_image_dir)\n\nmypy/tests/lib/pdf/test_pdf_handler.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/pdf/pdf_handler.py:29: in pdf2image_by_pdftoppm\n    run_cmd(['pdftoppm', '-jpeg',\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncmd = ['pdftoppm', '-jpeg', '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf', '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler/test_pdf2image_by_pdftoppm/slide']\nlog_output = False, shell = False, with_return = True, env = None\n\n    def run_cmd(cmd, log_output=False, shell=False,\n                with_return=True, env=None):\n        \"\"\"\n        通过 subprocess 执行系统命令\n    \n        :param log_output 打印 stdout\n        :param shell: 对于 Popen，在不使用 shell 的情况下\n            命令应该是参数的列表，而不是单个字符串\n            模拟终端执行，参数是字符串\n            使用 shell=True 可能会带来安全风险，特别是当命令字符串来自不可信的输入时\n        :param with_return: 表示获取返回结果，不输出终端内容\n        \"\"\"\n    \n        def _push_env(env: dict):\n            # 添加环境变量\n            old_env = os.environ.copy()\n            os.environ.update(env)\n            return old_env\n    \n        def _pop_env(old_env):\n            # 还原环境变量\n            os.environ.clear()\n            os.environ.update(old_env)\n    \n        if not shell and isinstance(cmd, str):\n            cmd = shlex.split(cmd)\n    \n        LOG.debug('正在执行命令: %s', cmd)\n        old_env = _push_env(env) if env else None\n    \n        try:\n            if with_return:\n                # text=True 参数来确保 subprocess 模块返回的是文本而不是字节\n                with subprocess.Popen(cmd,\n                                      stdout=subprocess.PIPE,\n                                      stderr=subprocess.STDOUT,\n                                      shell=shell,\n                                      text=True,\n                                      env=os.environ) as sp:\n                    stdout, _ = sp.communicate()\n                    retcode = sp.returncode\n                    sp.wait()\n            else:\n                # 将 stdout 和 stderr 都设置为 subprocess.DEVNULL 来丢弃输出\n                retcode = subprocess.run(cmd, shell=shell, check=True,\n                                         stdout=subprocess.PIPE,\n                                         stderr=subprocess.STDOUT).returncode\n                stdout = ''\n            if log_output:\n                LOG.debug(\"output: %s\", stdout)\n    \n            if retcode != 0:\n                errmsg = f'命令: {cmd} 执行失败，输出: {stdout}'\n                LOG.exception(errmsg)\n>               raise Exception(errmsg)\nE               Exception: 命令: ['pdftoppm', '-jpeg', '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf', '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler/test_pdf2image_by_pdftoppm/slide'] 执行失败，输出: I/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf': No such file or directory.\n\nmypy/utils/tools.py:262: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1715236488701,"stop":1715236488702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"copy_config_to_dir","time":{"start":1715239129832,"stop":1715239129833,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"test_output_dir","time":{"start":1715239129833,"stop":1715239129834,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"description":"\n    测试通过 poppler/pdftoppm 工具进行转换\n    ","status":"broken","statusMessage":"Exception: 命令: ['pdftoppm', '-jpeg', '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf', '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler/test_pdf2image_by_pdftoppm/slide'] 执行失败，输出: I/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf': No such file or directory.","statusTrace":"test_output_dir = '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler'\n\n    def test_pdf2image_by_pdftoppm(test_output_dir):\n        \"\"\"\n        测试通过 poppler/pdftoppm 工具进行转换\n        \"\"\"\n        output_image_dir = os.path.join(\n            test_output_dir, curr_func_name())\n        os.makedirs(output_image_dir, exist_ok=True)\n        api = PDFHandler(Assets.pdf)\n>       api.pdf2image_by_pdftoppm(output_image_dir)\n\nmypy/tests/lib/pdf/test_pdf_handler.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmypy/lib/pdf/pdf_handler.py:29: in pdf2image_by_pdftoppm\n    run_cmd(['pdftoppm', '-jpeg',\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncmd = ['pdftoppm', '-jpeg', '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf', '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler/test_pdf2image_by_pdftoppm/slide']\nlog_output = False, shell = False, with_return = True, env = None\n\n    def run_cmd(cmd, log_output=False, shell=False,\n                with_return=True, env=None):\n        \"\"\"\n        通过 subprocess 执行系统命令\n    \n        :param log_output 打印 stdout\n        :param shell: 对于 Popen，在不使用 shell 的情况下\n            命令应该是参数的列表，而不是单个字符串\n            模拟终端执行，参数是字符串\n            使用 shell=True 可能会带来安全风险，特别是当命令字符串来自不可信的输入时\n        :param with_return: 表示获取返回结果，不输出终端内容\n        \"\"\"\n    \n        def _push_env(env: dict):\n            # 添加环境变量\n            old_env = os.environ.copy()\n            os.environ.update(env)\n            return old_env\n    \n        def _pop_env(old_env):\n            # 还原环境变量\n            os.environ.clear()\n            os.environ.update(old_env)\n    \n        if not shell and isinstance(cmd, str):\n            cmd = shlex.split(cmd)\n    \n        LOG.debug('正在执行命令: %s', cmd)\n        old_env = _push_env(env) if env else None\n    \n        try:\n            if with_return:\n                # text=True 参数来确保 subprocess 模块返回的是文本而不是字节\n                with subprocess.Popen(cmd,\n                                      stdout=subprocess.PIPE,\n                                      stderr=subprocess.STDOUT,\n                                      shell=shell,\n                                      text=True,\n                                      env=os.environ) as sp:\n                    stdout, _ = sp.communicate()\n                    retcode = sp.returncode\n                    sp.wait()\n            else:\n                # 将 stdout 和 stderr 都设置为 subprocess.DEVNULL 来丢弃输出\n                retcode = subprocess.run(cmd, shell=shell, check=True,\n                                         stdout=subprocess.PIPE,\n                                         stderr=subprocess.STDOUT).returncode\n                stdout = ''\n            if log_output:\n                LOG.debug(\"output: %s\", stdout)\n    \n            if retcode != 0:\n                errmsg = f'命令: {cmd} 执行失败，输出: {stdout}'\n                LOG.exception(errmsg)\n>               raise Exception(errmsg)\nE               Exception: 命令: ['pdftoppm', '-jpeg', '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf', '/home/runner/work/Python/Python/mypy/tests/lib/pdf/_out/test_pdf_handler/test_pdf2image_by_pdftoppm/slide'] 执行失败，输出: I/O Error: Couldn't open file '/home/runner/work/Python/Python/mypy/assets/media/pdf.pdf': No such file or directory.\n\nmypy/utils/tools.py:262: Exception","steps":[],"attachments":[{"uid":"99dd26f6109e0f2a","name":"log","source":"99dd26f6109e0f2a.txt","type":"text/plain","size":871}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1715239130105,"stop":1715239130106,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"test_output_dir::0","time":{"start":1715239130105,"stop":1715239130105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"pdf"},{"name":"parentSuite","value":"lib.pdf"},{"name":"suite","value":"test_pdf_handler"},{"name":"host","value":"fv-az1145-772"},{"name":"thread","value":"6357-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.pdf.test_pdf_handler"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["pdf"]},"source":"91c71aa5e313a05c.json","parameterValues":[]}