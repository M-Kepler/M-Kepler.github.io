{"uid":"49530e1dfd2722d7","name":"test_llm_api[try_all]","fullName":"lib.llm.test_llm_api#test_llm_api","historyId":"857bdbd069a93cd161e93858484f2582","time":{"start":1724489145887,"stop":1724489152119,"duration":6232},"description":"\n    测试 llm API（封装了全部已对接的 LLM）\n    ","descriptionHtml":"<pre><code>测试 llm API（封装了全部已对接的 LLM）\n</code></pre>\n","status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)","statusTrace":"llm_provider = None\n\n    @pytest.mark.parametrize('llm_provider', [None, KimiHelper],\n                             ids=['try_all', 'kimi'])\n    def test_llm_api(llm_provider):\n        \"\"\"\n        测试 llm API（封装了全部已对接的 LLM）\n        \"\"\"\n        api = LLMHelper(llm_provider=llm_provider)\n        ppt_topic_cnt = 3\n        prompts = NurseTopic(topic_cnt=ppt_topic_cnt).prompt()\n        result = api.chat(prompts)\n>       result = json.loads(result)\n\nmypy/tests/lib/llm/test_llm_api.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f64e66cd070>\ns = '[\\n  “心血管内科护理中的血压监测与质量控制”,\\n  “神经外科护理中偏瘫患者康复训练的实践与思考”,\\n  “肿瘤科护理中化疗药物安全管理的品管圈项目”\\n]'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1724481546390,"stop":1724481546390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"copy_config_to_dir","time":{"start":1724489145885,"stop":1724489145886,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    测试 llm API（封装了全部已对接的 LLM）\n    ","status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)","statusTrace":"llm_provider = None\n\n    @pytest.mark.parametrize('llm_provider', [None, KimiHelper],\n                             ids=['try_all', 'kimi'])\n    def test_llm_api(llm_provider):\n        \"\"\"\n        测试 llm API（封装了全部已对接的 LLM）\n        \"\"\"\n        api = LLMHelper(llm_provider=llm_provider)\n        ppt_topic_cnt = 3\n        prompts = NurseTopic(topic_cnt=ppt_topic_cnt).prompt()\n        result = api.chat(prompts)\n>       result = json.loads(result)\n\nmypy/tests/lib/llm/test_llm_api.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f64e66cd070>\ns = '[\\n  “心血管内科护理中的血压监测与质量控制”,\\n  “神经外科护理中偏瘫患者康复训练的实践与思考”,\\n  “肿瘤科护理中化疗药物安全管理的品管圈项目”\\n]'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 3 (char 4)\n\n/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","steps":[],"attachments":[{"uid":"1836171e1540191b","name":"log","source":"1836171e1540191b.txt","type":"text/plain","size":86}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"copy_config_to_dir::finish_callback","time":{"start":1724489235799,"stop":1724489235800,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"lib.llm"},{"name":"suite","value":"test_llm_api"},{"name":"host","value":"fv-az775-20"},{"name":"thread","value":"8935-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"lib.llm.test_llm_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"llm_provider","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"49530e1dfd2722d7.json","parameterValues":["None"]}